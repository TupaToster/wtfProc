<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_asm__head_8h" xml:lang="en-US">
<title>asm/asm_head.h File Reference</title>
<indexterm><primary>asm/asm_head.h</primary></indexterm>
<programlisting>#include &quot;D:\los_projectados\wtfProc\lib\globalization.h&quot;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;assert.h&gt;
</programlisting><simplesect>
    <title>Macros    </title>
        <itemizedlist>
            <listitem><para>#define <link linkend="_asm__head_8h_1acf265fc2407fbc5c1aa5909a1bc4e0d3">tagCheck</link>(...)</para>

<para>Macros to check for no writing run of writeWtf. </para>
</listitem>
            <listitem><para>#define <link linkend="_asm__head_8h_1aa020607c1c6794b5b426e2d70c488153">DEF_CMD</link>(name,  num,  arg,  code)   CMD_##name = num,</para>
</listitem>
            <listitem><para>#define <link linkend="_asm__head_8h_1ac6991086843a1f1acea03a81d84aebba">writeBin</link>(var,  outFile)   <link linkend="_asm__head_8h_1a3dbf87d57f9f11d4e10cf74b6887a21a">writeBinInternal</link> (&amp;var, outFile, sizeof (var))</para>

<para>Macros for writeBinInternal. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Enumerations    </title>
        <itemizedlist>
            <listitem><para>enum <link linkend="_asm__head_8h_1a04887de32e1f60f8dc157312b8f27665">CMD</link> </para>

<para>Enumerator of command codes (autogenerated) </para>
</listitem>
            <listitem><para>enum <link linkend="_asm__head_8h_1adad90fa030af56592ad194a41341ffcd">masks</link> { 
<link linkend="_asm__head_8h_1adad90fa030af56592ad194a41341ffcda4db5e001347c36d91aefd5b7fd523ba2">MASK_RAM</link> = 1&lt;&lt;7
, <link linkend="_asm__head_8h_1adad90fa030af56592ad194a41341ffcda9782d5c7f682da2c29f879755e3b028d">MASK_REG</link> = 1&lt;&lt;6
, <link linkend="_asm__head_8h_1adad90fa030af56592ad194a41341ffcda0a4eede2840471178edb9122dcba577f">MASK_IMM</link> = 1&lt;&lt;5
, <link linkend="_asm__head_8h_1adad90fa030af56592ad194a41341ffcda9c0d0344611dae38b63521e9e87b4c70">MASK_CMD</link> = (1&lt;&lt;5) - 1
, 
<link linkend="_proc__head_8h_1adad90fa030af56592ad194a41341ffcda4db5e001347c36d91aefd5b7fd523ba2">MASK_RAM</link> = 1&lt;&lt;7
, <link linkend="_proc__head_8h_1adad90fa030af56592ad194a41341ffcda9782d5c7f682da2c29f879755e3b028d">MASK_REG</link> = 1&lt;&lt;6
, <link linkend="_proc__head_8h_1adad90fa030af56592ad194a41341ffcda0a4eede2840471178edb9122dcba577f">MASK_IMM</link> = 1&lt;&lt;5
, <link linkend="_proc__head_8h_1adad90fa030af56592ad194a41341ffcda9c0d0344611dae38b63521e9e87b4c70">MASK_CMD</link> = (1&lt;&lt;5) - 1
 }</para>

<para>Masks for different fields of command byte. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>void <link linkend="_asm__head_8h_1a3dbf87d57f9f11d4e10cf74b6887a21a">writeBinInternal</link> (void *val, FILE *outFile, size_t sizeOfVar)</para>

<para>Internal function for writeBin macros. Is a memcpy to file basically. </para>
</listitem>
            <listitem><para>void <link linkend="_asm__head_8h_1afebc5259c059f1c13b2c3eb589bbd778">handleArg</link> (<link linkend="_struct_text">Text</link> *code, int line, FILE *outFile, char cmdNum, int tags[512])</para>

<para>Handles argument of a command. </para>
</listitem>
            <listitem><para>char * <link linkend="_asm__head_8h_1ad94c08d203bdf6cd4fdad8a420073a85">handleComLine</link> (int argc, char *argv[], bool *aFlag, char **outFileName)</para>

<para>Handles command line arguments. </para>
</listitem>
            <listitem><para>void <link linkend="_asm__head_8h_1aa4ecb6747b94442217ee22b2df052036">writeWtf</link> (<link linkend="_struct_text">Text</link> *codeFile, FILE *outFile, int tags[512])</para>

<para>Writes into a .wtf binary file. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Variables    </title>
        <itemizedlist>
            <listitem><para>size_t <link linkend="_asm__head_8h_1a5c1a69eec57cefaee3f692279022198b">ip</link></para>

<para>Counts ip of current unstruction in cpu-&gt;code. </para>
</listitem>
            <listitem><para>bool <link linkend="_asm__head_8h_1ace8c8b51e3dcde290dd6b8a7bc5feba0">errors</link></para>

<para>Is a flag for if errors have occured. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Macro Definition Documentation</title>
<anchor xml:id="_asm__head_8h_1aa020607c1c6794b5b426e2d70c488153"/>    <section>
    <title>DEF_CMD</title>
<indexterm><primary>DEF_CMD</primary><secondary>asm_head.h</secondary></indexterm>
<indexterm><primary>asm_head.h</primary><secondary>DEF_CMD</secondary></indexterm>
<para><computeroutput>#define DEF_CMD( name,  num,  arg,  code)   CMD_##name = num,</computeroutput></para><para>
Definition at line 25 of file asm_head.h.</para>
    </section><anchor xml:id="_asm__head_8h_1acf265fc2407fbc5c1aa5909a1bc4e0d3"/>    <section>
    <title>tagCheck</title>
<indexterm><primary>tagCheck</primary><secondary>asm_head.h</secondary></indexterm>
<indexterm><primary>asm_head.h</primary><secondary>tagCheck</secondary></indexterm>
<para><computeroutput>#define tagCheck( ...)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting>&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(outFile&#32;!=&#32;NULL)&#32;{&#32;\
&#32;&#32;&#32;&#32;__VA_ARGS__&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
}
</programlisting><para>

<para>Macros to check for no writing run of writeWtf. </para>
</para>
<para>
Definition at line 11 of file asm_head.h.</para>
    </section><anchor xml:id="_asm__head_8h_1ac6991086843a1f1acea03a81d84aebba"/>    <section>
    <title>writeBin</title>
<indexterm><primary>writeBin</primary><secondary>asm_head.h</secondary></indexterm>
<indexterm><primary>asm_head.h</primary><secondary>writeBin</secondary></indexterm>
<para><computeroutput>#define writeBin( var,  outFile)   <link linkend="_asm__head_8h_1a3dbf87d57f9f11d4e10cf74b6887a21a">writeBinInternal</link> (&amp;var, outFile, sizeof (var))</computeroutput></para><para>

<para>Macros for writeBinInternal. </para>
</para>
<para>
Definition at line 40 of file asm_head.h.</para>
</section>
</section>
<section>
<title>Enumeration Type Documentation</title>
<anchor xml:id="_asm__head_8h_1a04887de32e1f60f8dc157312b8f27665"/>    <section>
    <title>CMD</title>
<indexterm><primary>CMD</primary><secondary>asm_head.h</secondary></indexterm>
<indexterm><primary>asm_head.h</primary><secondary>CMD</secondary></indexterm>
<para><computeroutput>enum <link linkend="_asm__head_8h_1a04887de32e1f60f8dc157312b8f27665">CMD</link></computeroutput></para><para>

<para>Enumerator of command codes (autogenerated) </para>
</para>
<para>
Definition at line 22 of file asm_head.h.</para>
    </section><anchor xml:id="_asm__head_8h_1adad90fa030af56592ad194a41341ffcd"/>    <section>
    <title>masks</title>
<indexterm><primary>masks</primary><secondary>asm_head.h</secondary></indexterm>
<indexterm><primary>asm_head.h</primary><secondary>masks</secondary></indexterm>
<para><computeroutput>enum <link linkend="_asm__head_8h_1adad90fa030af56592ad194a41341ffcd">masks</link></computeroutput></para><para>

<para>Masks for different fields of command byte. </para>
</para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>MASK_RAM</primary><secondary>asm_head.h</secondary></indexterm>
<indexterm><primary>asm_head.h</primary><secondary>MASK_RAM</secondary></indexterm>
<anchor xml:id="_asm__head_8h_1adad90fa030af56592ad194a41341ffcda4db5e001347c36d91aefd5b7fd523ba2"/>MASK_RAM</entry><entry>
<para>Ram bit. </para>
</entry></row><row><entry><indexterm><primary>MASK_REG</primary><secondary>asm_head.h</secondary></indexterm>
<indexterm><primary>asm_head.h</primary><secondary>MASK_REG</secondary></indexterm>
<anchor xml:id="_asm__head_8h_1adad90fa030af56592ad194a41341ffcda9782d5c7f682da2c29f879755e3b028d"/>MASK_REG</entry><entry>
<para>Register bit. </para>
</entry></row><row><entry><indexterm><primary>MASK_IMM</primary><secondary>asm_head.h</secondary></indexterm>
<indexterm><primary>asm_head.h</primary><secondary>MASK_IMM</secondary></indexterm>
<anchor xml:id="_asm__head_8h_1adad90fa030af56592ad194a41341ffcda0a4eede2840471178edb9122dcba577f"/>MASK_IMM</entry><entry>
<para>Immidiate constant bit. </para>
</entry></row><row><entry><indexterm><primary>MASK_CMD</primary><secondary>asm_head.h</secondary></indexterm>
<indexterm><primary>asm_head.h</primary><secondary>MASK_CMD</secondary></indexterm>
<anchor xml:id="_asm__head_8h_1adad90fa030af56592ad194a41341ffcda9c0d0344611dae38b63521e9e87b4c70"/>MASK_CMD</entry><entry>
<para>Bits for command number. </para>
</entry></row><row><entry><indexterm><primary>MASK_RAM</primary><secondary>asm_head.h</secondary></indexterm>
<indexterm><primary>asm_head.h</primary><secondary>MASK_RAM</secondary></indexterm>
<anchor xml:id="_asm__head_8h_1adad90fa030af56592ad194a41341ffcda4db5e001347c36d91aefd5b7fd523ba2"/>MASK_RAM</entry><entry>
<para>Mask for ram access. </para>
</entry></row><row><entry><indexterm><primary>MASK_REG</primary><secondary>asm_head.h</secondary></indexterm>
<indexterm><primary>asm_head.h</primary><secondary>MASK_REG</secondary></indexterm>
<anchor xml:id="_asm__head_8h_1adad90fa030af56592ad194a41341ffcda9782d5c7f682da2c29f879755e3b028d"/>MASK_REG</entry><entry>
<para>Mask for reg access. </para>
</entry></row><row><entry><indexterm><primary>MASK_IMM</primary><secondary>asm_head.h</secondary></indexterm>
<indexterm><primary>asm_head.h</primary><secondary>MASK_IMM</secondary></indexterm>
<anchor xml:id="_asm__head_8h_1adad90fa030af56592ad194a41341ffcda0a4eede2840471178edb9122dcba577f"/>MASK_IMM</entry><entry>
<para>Mask for immidiate constant. </para>
</entry></row><row><entry><indexterm><primary>MASK_CMD</primary><secondary>asm_head.h</secondary></indexterm>
<indexterm><primary>asm_head.h</primary><secondary>MASK_CMD</secondary></indexterm>
<anchor xml:id="_asm__head_8h_1adad90fa030af56592ad194a41341ffcda9c0d0344611dae38b63521e9e87b4c70"/>MASK_CMD</entry><entry>
<para>Mask for actual command number. </para>
</entry></row>    </tbody>
    </tgroup>
</informaltable>
<para>
Definition at line 31 of file asm_head.h.</para>
</section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_asm__head_8h_1afebc5259c059f1c13b2c3eb589bbd778"/>    <section>
    <title>handleArg()</title>
<indexterm><primary>handleArg</primary><secondary>asm_head.h</secondary></indexterm>
<indexterm><primary>asm_head.h</primary><secondary>handleArg</secondary></indexterm>
<para><computeroutput>void handleArg (<link linkend="_struct_text">Text</link> * code, int line, FILE * outFile, char cmdNum, int tags[512])</computeroutput></para><para>

<para>Handles argument of a command. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>code</entry>
                                <entry>
<para><link linkend="_struct_text">Text</link> of program in asm </para>
</entry>
                            </row>
                            <row>
                                <entry>line</entry>
                                <entry>
<para>Current line </para>
</entry>
                            </row>
                            <row>
                                <entry>outFile</entry>
                                <entry>
<para>File to write to </para>
</entry>
                            </row>
                            <row>
                                <entry>cmdNum</entry>
                                <entry>
<para>Number of command it&apos;s counting arg for </para>
</entry>
                            </row>
                            <row>
                                <entry>tags</entry>
                                <entry>
<para>Array of tags for jumps </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 12 of file asm_funcs.cpp.</para>
    </section><anchor xml:id="_asm__head_8h_1ad94c08d203bdf6cd4fdad8a420073a85"/>    <section>
    <title>handleComLine()</title>
<indexterm><primary>handleComLine</primary><secondary>asm_head.h</secondary></indexterm>
<indexterm><primary>asm_head.h</primary><secondary>handleComLine</secondary></indexterm>
<para><computeroutput>char* handleComLine (int argc, char * argv[], bool * aFlag, char ** outFileName)</computeroutput></para><para>

<para>Handles command line arguments. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>argc</entry>
                                <entry>
<para>Amount of arguments </para>
</entry>
                            </row>
                            <row>
                                <entry>argv</entry>
                                <entry>
<para>Array of arguments </para>
</entry>
                            </row>
                            <row>
                                <entry>aFlag</entry>
                                <entry>
<para>Wrote by function. Indicates if no check for up to date (unused currently) </para>
</entry>
                            </row>
                            <row>
                                <entry>outFileName</entry>
                                <entry>
<para>Wrote by function. Name of file to write to </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Name of file to read from </para>
</formalpara>
</para>
<para>
Definition at line 140 of file asm_funcs.cpp.</para>
    </section><anchor xml:id="_asm__head_8h_1a3dbf87d57f9f11d4e10cf74b6887a21a"/>    <section>
    <title>writeBinInternal()</title>
<indexterm><primary>writeBinInternal</primary><secondary>asm_head.h</secondary></indexterm>
<indexterm><primary>asm_head.h</primary><secondary>writeBinInternal</secondary></indexterm>
<para><computeroutput>void writeBinInternal (void * val, FILE * outFile, size_t sizeOfVar)</computeroutput></para><para>

<para>Internal function for writeBin macros. Is a memcpy to file basically. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>val</entry>
                                <entry>
<para>Value to write </para>
</entry>
                            </row>
                            <row>
                                <entry>outFile</entry>
                                <entry>
<para>File to write to </para>
</entry>
                            </row>
                            <row>
                                <entry>sizeOfVar</entry>
                                <entry>
<para>Size of variable </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 3 of file asm_funcs.cpp.</para>
    </section><anchor xml:id="_asm__head_8h_1aa4ecb6747b94442217ee22b2df052036"/>    <section>
    <title>writeWtf()</title>
<indexterm><primary>writeWtf</primary><secondary>asm_head.h</secondary></indexterm>
<indexterm><primary>asm_head.h</primary><secondary>writeWtf</secondary></indexterm>
<para><computeroutput>void writeWtf (<link linkend="_struct_text">Text</link> * codeFile, FILE * outFile, int tags[512])</computeroutput></para><para>

<para>Writes into a .wtf binary file. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>codeFile</entry>
                                <entry>
<para>Struct with source code </para>
</entry>
                            </row>
                            <row>
                                <entry>outFile</entry>
                                <entry>
<para>File to write to </para>
</entry>
                            </row>
                            <row>
                                <entry>tags</entry>
                                <entry>
<para>Array of tags for jumps </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 199 of file asm_funcs.cpp.</para>
</section>
</section>
<section>
<title>Variable Documentation</title>
<anchor xml:id="_asm__head_8h_1ace8c8b51e3dcde290dd6b8a7bc5feba0"/>    <section>
    <title>errors</title>
<indexterm><primary>errors</primary><secondary>asm_head.h</secondary></indexterm>
<indexterm><primary>asm_head.h</primary><secondary>errors</secondary></indexterm>
<para><computeroutput>bool errors<computeroutput>[extern]</computeroutput></computeroutput></para><para>

<para>Is a flag for if errors have occured. </para>
</para>
<para>
Definition at line 5 of file asm.cpp.</para>
    </section><anchor xml:id="_asm__head_8h_1a5c1a69eec57cefaee3f692279022198b"/>    <section>
    <title>ip</title>
<indexterm><primary>ip</primary><secondary>asm_head.h</secondary></indexterm>
<indexterm><primary>asm_head.h</primary><secondary>ip</secondary></indexterm>
<para><computeroutput>size_t ip<computeroutput>[extern]</computeroutput></computeroutput></para><para>

<para>Counts ip of current unstruction in cpu-&gt;code. </para>
</para>
<para>
Definition at line 3 of file asm.cpp.</para>
</section>
</section>
</section>
