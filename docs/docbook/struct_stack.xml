<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_struct_stack" xml:lang="en-US">
<title>Stack Struct Reference</title>
<indexterm><primary>Stack</primary></indexterm>
<para>

<para>Stores a stack with several support variables. </para>
 
</para>
<para>
<computeroutput>#include &lt;stack.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Attributes    </title>
        <itemizedlist>
            <listitem><para>unsigned int <link linkend="_struct_stack_1a79193412a2c8b6a35f4ca6c45f0765dc">canL</link> = 0xDEADBEEF</para>

<para>left cannary of struct </para>
</listitem>
            <listitem><para>unsigned int <link linkend="_struct_stack_1a65b24b547c77ac4b5e6dbdc0fd6a3283">hash</link> = 0</para>

<para>hash value </para>
</listitem>
            <listitem><para>size_t <link linkend="_struct_stack_1a3a469595caaaf49bbce059efabbe07b5">size</link> = 0</para>

<para>size of stack </para>
</listitem>
            <listitem><para>size_t <link linkend="_struct_stack_1afb6d4ad9d2904c20d50102d310c963e0">capacity</link> = 0</para>

<para>capacity of stack </para>
</listitem>
            <listitem><para>size_t <link linkend="_struct_stack_1aed401c797b1e17541ad03a3fded5187d">errCode</link> = <link linkend="_stack_8h_1abedba404d3287b5f1ba88ede8463da4bad8b76af209cd7ba83b4ebf33ba1637b2">ok</link></para>

<para>error code </para>
</listitem>
            <listitem><para><link linkend="_stack_8h_1a178d810735b72dab41331e71af8bfe99">ELEM_TYPE</link> * <link linkend="_struct_stack_1a94f7a65fb55d15a76270929f5b9c6397">stack</link> = NULL</para>

<para>ptr to stack </para>
</listitem>
            <listitem><para>unsigned int * <link linkend="_struct_stack_1abd443924fa635c0a50fadff4da57dfba">stackCanL</link> = NULL</para>

<para>left cannary of stack </para>
</listitem>
            <listitem><para>unsigned int * <link linkend="_struct_stack_1a09a1dd7998caf0891ae5889e9b548aea">stackCanR</link> = NULL</para>

<para>right cannary of stack </para>
</listitem>
            <listitem><para>unsigned int <link linkend="_struct_stack_1ab067c98a0541b1d261f6c44892eb08c5">canR</link> = 0xD34DB33F</para>

<para>right cannary of struct </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Stores a stack with several support variables. </para>
<para>
Definition at line 55 of file stack.h.</para>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_struct_stack_1a79193412a2c8b6a35f4ca6c45f0765dc"/>    <section>
    <title>canL</title>
<indexterm><primary>canL</primary><secondary>Stack</secondary></indexterm>
<indexterm><primary>Stack</primary><secondary>canL</secondary></indexterm>
<para><computeroutput>unsigned int Stack::canL = 0xDEADBEEF</computeroutput></para><para>

<para>left cannary of struct </para>
</para>
<para>
Definition at line 57 of file stack.h.</para>
    </section><anchor xml:id="_struct_stack_1ab067c98a0541b1d261f6c44892eb08c5"/>    <section>
    <title>canR</title>
<indexterm><primary>canR</primary><secondary>Stack</secondary></indexterm>
<indexterm><primary>Stack</primary><secondary>canR</secondary></indexterm>
<para><computeroutput>unsigned int Stack::canR = 0xD34DB33F</computeroutput></para><para>

<para>right cannary of struct </para>
</para>
<para>
Definition at line 65 of file stack.h.</para>
    </section><anchor xml:id="_struct_stack_1afb6d4ad9d2904c20d50102d310c963e0"/>    <section>
    <title>capacity</title>
<indexterm><primary>capacity</primary><secondary>Stack</secondary></indexterm>
<indexterm><primary>Stack</primary><secondary>capacity</secondary></indexterm>
<para><computeroutput>size_t Stack::capacity = 0</computeroutput></para><para>

<para>capacity of stack </para>
</para>
<para>
Definition at line 60 of file stack.h.</para>
    </section><anchor xml:id="_struct_stack_1aed401c797b1e17541ad03a3fded5187d"/>    <section>
    <title>errCode</title>
<indexterm><primary>errCode</primary><secondary>Stack</secondary></indexterm>
<indexterm><primary>Stack</primary><secondary>errCode</secondary></indexterm>
<para><computeroutput>size_t Stack::errCode = <link linkend="_stack_8h_1abedba404d3287b5f1ba88ede8463da4bad8b76af209cd7ba83b4ebf33ba1637b2">ok</link></computeroutput></para><para>

<para>error code </para>
</para>
<para>
Definition at line 61 of file stack.h.</para>
    </section><anchor xml:id="_struct_stack_1a65b24b547c77ac4b5e6dbdc0fd6a3283"/>    <section>
    <title>hash</title>
<indexterm><primary>hash</primary><secondary>Stack</secondary></indexterm>
<indexterm><primary>Stack</primary><secondary>hash</secondary></indexterm>
<para><computeroutput>unsigned int Stack::hash = 0</computeroutput></para><para>

<para>hash value </para>
</para>
<para>
Definition at line 58 of file stack.h.</para>
    </section><anchor xml:id="_struct_stack_1a3a469595caaaf49bbce059efabbe07b5"/>    <section>
    <title>size</title>
<indexterm><primary>size</primary><secondary>Stack</secondary></indexterm>
<indexterm><primary>Stack</primary><secondary>size</secondary></indexterm>
<para><computeroutput>size_t Stack::size = 0</computeroutput></para><para>

<para>size of stack </para>
</para>
<para>
Definition at line 59 of file stack.h.</para>
    </section><anchor xml:id="_struct_stack_1a94f7a65fb55d15a76270929f5b9c6397"/>    <section>
    <title>stack</title>
<indexterm><primary>stack</primary><secondary>Stack</secondary></indexterm>
<indexterm><primary>Stack</primary><secondary>stack</secondary></indexterm>
<para><computeroutput><link linkend="_stack_8h_1a178d810735b72dab41331e71af8bfe99">ELEM_TYPE</link>* Stack::stack = NULL</computeroutput></para><para>

<para>ptr to stack </para>
</para>
<para>
Definition at line 62 of file stack.h.</para>
    </section><anchor xml:id="_struct_stack_1abd443924fa635c0a50fadff4da57dfba"/>    <section>
    <title>stackCanL</title>
<indexterm><primary>stackCanL</primary><secondary>Stack</secondary></indexterm>
<indexterm><primary>Stack</primary><secondary>stackCanL</secondary></indexterm>
<para><computeroutput>unsigned int* Stack::stackCanL = NULL</computeroutput></para><para>

<para>left cannary of stack </para>
</para>
<para>
Definition at line 63 of file stack.h.</para>
    </section><anchor xml:id="_struct_stack_1a09a1dd7998caf0891ae5889e9b548aea"/>    <section>
    <title>stackCanR</title>
<indexterm><primary>stackCanR</primary><secondary>Stack</secondary></indexterm>
<indexterm><primary>Stack</primary><secondary>stackCanR</secondary></indexterm>
<para><computeroutput>unsigned int* Stack::stackCanR = NULL</computeroutput></para><para>

<para>right cannary of stack </para>
</para>
<para>
Definition at line 64 of file stack.h.</para>
</section>
<para>
The documentation for this struct was generated from the following file:</para>
lib/<link linkend="_stack_8h">stack.h</link></section>
</section>
