.TH "asm/asm_funcs.cpp" 3 "Sat Oct 15 2022" "Version 2" "Soft cpu" \" -*- nroff -*-
.ad l
.nh
.SH NAME
asm/asm_funcs.cpp
.SH SYNOPSIS
.br
.PP
\fC#include 'asm_head\&.h'\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBDEF_CMD\fP(name,  num,  arg,  code)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBwriteBinInternal\fP (void *val, FILE *outFile, size_t sizeOfVar)"
.br
.RI "Internal function for writeBin macros\&. Is a memcpy to file basically\&. "
.ti -1c
.RI "void \fBhandleArg\fP (\fBText\fP *code, int line, FILE *outFile, char cmdNum, int tags[512])"
.br
.RI "Handles argument of a command\&. "
.ti -1c
.RI "char * \fBhandleComLine\fP (int argc, char *argv[], bool *aFlag, char **outFileName)"
.br
.RI "Handles command line arguments\&. "
.ti -1c
.RI "void \fBwriteWtf\fP (\fBText\fP *codeFile, FILE *outFile, int tags[512])"
.br
.RI "Writes into a \&.wtf binary file\&. "
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define DEF_CMD(name, num, arg, code)"
\fBValue:\fP
.PP
.nf
            if (strcmp (inputStr, #name) == 0) {                      \
                                                                      \
                if (arg == 0){                                        \\
                                                                      \\
                    tagCheck(fputc (num, outFile);)                   \
                    ip += sizeof (char);                              \
                }                                                     \
                else if (arg != 0) {                                  \\
                                                                      \\
                    handleArg (codeFile, i, outFile, num, tags);      \
                }                                                     \
            }                                                         \
            else
.fi
.SH "Function Documentation"
.PP 
.SS "void handleArg (\fBText\fP * code, int line, FILE * outFile, char cmdNum, int tags[512])"

.PP
Handles argument of a command\&. 
.PP
\fBParameters\fP
.RS 4
\fIcode\fP \fBText\fP of program in asm 
.br
\fIline\fP Current line 
.br
\fIoutFile\fP File to write to 
.br
\fIcmdNum\fP Number of command it's counting arg for 
.br
\fItags\fP Array of tags for jumps 
.RE
.PP

.PP
Definition at line 12 of file asm_funcs\&.cpp\&.
.SS "char* handleComLine (int argc, char * argv[], bool * aFlag, char ** outFileName)"

.PP
Handles command line arguments\&. 
.PP
\fBParameters\fP
.RS 4
\fIargc\fP Amount of arguments 
.br
\fIargv\fP Array of arguments 
.br
\fIaFlag\fP Wrote by function\&. Indicates if no check for up to date (unused currently) 
.br
\fIoutFileName\fP Wrote by function\&. Name of file to write to 
.RE
.PP
\fBReturns\fP
.RS 4
Name of file to read from 
.RE
.PP

.PP
Definition at line 140 of file asm_funcs\&.cpp\&.
.SS "void writeBinInternal (void * val, FILE * outFile, size_t sizeOfVar)"

.PP
Internal function for writeBin macros\&. Is a memcpy to file basically\&. 
.PP
\fBParameters\fP
.RS 4
\fIval\fP Value to write 
.br
\fIoutFile\fP File to write to 
.br
\fIsizeOfVar\fP Size of variable 
.RE
.PP

.PP
Definition at line 3 of file asm_funcs\&.cpp\&.
.SS "void writeWtf (\fBText\fP * codeFile, FILE * outFile, int tags[512])"

.PP
Writes into a \&.wtf binary file\&. 
.PP
\fBParameters\fP
.RS 4
\fIcodeFile\fP Struct with source code 
.br
\fIoutFile\fP File to write to 
.br
\fItags\fP Array of tags for jumps 
.RE
.PP

.PP
Definition at line 199 of file asm_funcs\&.cpp\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Soft cpu from the source code\&.
