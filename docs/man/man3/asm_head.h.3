.TH "asm/asm_head.h" 3 "Sat Oct 15 2022" "Version 2" "Soft cpu" \" -*- nroff -*-
.ad l
.nh
.SH NAME
asm/asm_head.h
.SH SYNOPSIS
.br
.PP
\fC#include 'D:\\los_projectados\\wtfProc\\lib\\globalization\&.h'\fP
.br
\fC#include <stdio\&.h>\fP
.br
\fC#include <stdlib\&.h>\fP
.br
\fC#include <assert\&.h>\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBtagCheck\fP(\&.\&.\&.)"
.br
.RI "Macros to check for no writing run of writeWtf\&. "
.ti -1c
.RI "#define \fBDEF_CMD\fP(name,  num,  arg,  code)   CMD_##name = num,"
.br
.ti -1c
.RI "#define \fBwriteBin\fP(var,  outFile)   \fBwriteBinInternal\fP (&var, outFile, sizeof (var))"
.br
.RI "Macros for writeBinInternal\&. "
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBCMD\fP "
.br
.RI "Enumerator of command codes (autogenerated) "
.ti -1c
.RI "enum \fBmasks\fP { \fBMASK_RAM\fP = 1<<7, \fBMASK_REG\fP = 1<<6, \fBMASK_IMM\fP = 1<<5, \fBMASK_CMD\fP = (1<<5) - 1, \fBMASK_RAM\fP = 1<<7, \fBMASK_REG\fP = 1<<6, \fBMASK_IMM\fP = 1<<5, \fBMASK_CMD\fP = (1<<5) - 1 }"
.br
.RI "Masks for different fields of command byte\&. "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBwriteBinInternal\fP (void *val, FILE *outFile, size_t sizeOfVar)"
.br
.RI "Internal function for writeBin macros\&. Is a memcpy to file basically\&. "
.ti -1c
.RI "void \fBhandleArg\fP (\fBText\fP *code, int line, FILE *outFile, char cmdNum, int tags[512])"
.br
.RI "Handles argument of a command\&. "
.ti -1c
.RI "char * \fBhandleComLine\fP (int argc, char *argv[], bool *aFlag, char **outFileName)"
.br
.RI "Handles command line arguments\&. "
.ti -1c
.RI "void \fBwriteWtf\fP (\fBText\fP *codeFile, FILE *outFile, int tags[512])"
.br
.RI "Writes into a \&.wtf binary file\&. "
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "size_t \fBip\fP"
.br
.RI "Counts ip of current unstruction in cpu->code\&. "
.ti -1c
.RI "bool \fBerrors\fP"
.br
.RI "Is a flag for if errors have occured\&. "
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define DEF_CMD(name, num, arg, code)   CMD_##name = num,"

.PP
Definition at line 25 of file asm_head\&.h\&.
.SS "#define tagCheck( \&.\&.\&.)"
\fBValue:\fP
.PP
.nf
    if (outFile != NULL) { \
    __VA_ARGS__                              \
}
.fi
.PP
Macros to check for no writing run of writeWtf\&. 
.PP
Definition at line 11 of file asm_head\&.h\&.
.SS "#define writeBin(var, outFile)   \fBwriteBinInternal\fP (&var, outFile, sizeof (var))"

.PP
Macros for writeBinInternal\&. 
.PP
Definition at line 40 of file asm_head\&.h\&.
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBCMD\fP"

.PP
Enumerator of command codes (autogenerated) 
.PP
Definition at line 22 of file asm_head\&.h\&.
.SS "enum \fBmasks\fP"

.PP
Masks for different fields of command byte\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIMASK_RAM \fP\fP
Ram bit\&. 
.TP
\fB\fIMASK_REG \fP\fP
Register bit\&. 
.TP
\fB\fIMASK_IMM \fP\fP
Immidiate constant bit\&. 
.TP
\fB\fIMASK_CMD \fP\fP
Bits for command number\&. 
.TP
\fB\fIMASK_RAM \fP\fP
Mask for ram access\&. 
.TP
\fB\fIMASK_REG \fP\fP
Mask for reg access\&. 
.TP
\fB\fIMASK_IMM \fP\fP
Mask for immidiate constant\&. 
.TP
\fB\fIMASK_CMD \fP\fP
Mask for actual command number\&. 
.PP
Definition at line 31 of file asm_head\&.h\&.
.SH "Function Documentation"
.PP 
.SS "void handleArg (\fBText\fP * code, int line, FILE * outFile, char cmdNum, int tags[512])"

.PP
Handles argument of a command\&. 
.PP
\fBParameters\fP
.RS 4
\fIcode\fP \fBText\fP of program in asm 
.br
\fIline\fP Current line 
.br
\fIoutFile\fP File to write to 
.br
\fIcmdNum\fP Number of command it's counting arg for 
.br
\fItags\fP Array of tags for jumps 
.RE
.PP

.PP
Definition at line 12 of file asm_funcs\&.cpp\&.
.SS "char* handleComLine (int argc, char * argv[], bool * aFlag, char ** outFileName)"

.PP
Handles command line arguments\&. 
.PP
\fBParameters\fP
.RS 4
\fIargc\fP Amount of arguments 
.br
\fIargv\fP Array of arguments 
.br
\fIaFlag\fP Wrote by function\&. Indicates if no check for up to date (unused currently) 
.br
\fIoutFileName\fP Wrote by function\&. Name of file to write to 
.RE
.PP
\fBReturns\fP
.RS 4
Name of file to read from 
.RE
.PP

.PP
Definition at line 140 of file asm_funcs\&.cpp\&.
.SS "void writeBinInternal (void * val, FILE * outFile, size_t sizeOfVar)"

.PP
Internal function for writeBin macros\&. Is a memcpy to file basically\&. 
.PP
\fBParameters\fP
.RS 4
\fIval\fP Value to write 
.br
\fIoutFile\fP File to write to 
.br
\fIsizeOfVar\fP Size of variable 
.RE
.PP

.PP
Definition at line 3 of file asm_funcs\&.cpp\&.
.SS "void writeWtf (\fBText\fP * codeFile, FILE * outFile, int tags[512])"

.PP
Writes into a \&.wtf binary file\&. 
.PP
\fBParameters\fP
.RS 4
\fIcodeFile\fP Struct with source code 
.br
\fIoutFile\fP File to write to 
.br
\fItags\fP Array of tags for jumps 
.RE
.PP

.PP
Definition at line 199 of file asm_funcs\&.cpp\&.
.SH "Variable Documentation"
.PP 
.SS "bool errors\fC [extern]\fP"

.PP
Is a flag for if errors have occured\&. 
.PP
Definition at line 5 of file asm\&.cpp\&.
.SS "size_t ip\fC [extern]\fP"

.PP
Counts ip of current unstruction in cpu->code\&. 
.PP
Definition at line 3 of file asm\&.cpp\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Soft cpu from the source code\&.
