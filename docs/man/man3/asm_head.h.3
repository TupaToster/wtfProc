.TH "asm/asm_head.h" 3 "Sat Oct 15 2022" "Version 2" "Soft cpu" \" -*- nroff -*-
.ad l
.nh
.SH NAME
asm/asm_head.h
.SH SYNOPSIS
.br
.PP
\fC#include 'D:\\los_projectados\\wtfProc\\lib\\globalization\&.h'\fP
.br
\fC#include <stdio\&.h>\fP
.br
\fC#include <stdlib\&.h>\fP
.br
\fC#include <assert\&.h>\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBtagCheck\fP(\&.\&.\&.)"
.br
.ti -1c
.RI "#define \fBDEF_CMD\fP(name,  num,  arg,  code)   CMD_##name = num,"
.br
.ti -1c
.RI "#define \fBwriteBin\fP(var,  outFile)   \fBwriteBinInternal\fP (&var, outFile, sizeof (var))"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBCMD\fP "
.br
.ti -1c
.RI "enum \fBmasks\fP { \fBMASK_RAM\fP = 1<<7, \fBMASK_REG\fP = 1<<6, \fBMASK_IMM\fP = 1<<5, \fBMASK_CMD\fP = (1<<5) - 1, \fBMASK_RAM\fP = 1<<7, \fBMASK_REG\fP = 1<<6, \fBMASK_IMM\fP = 1<<5, \fBMASK_CMD\fP = (1<<5) - 1 }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBwriteBinInternal\fP (void *val, FILE *outFile, size_t sizeOfVar)"
.br
.ti -1c
.RI "void \fBhandleArg\fP (\fBText\fP *code, int line, FILE *outFile, char cmdNum, int tags[512])"
.br
.ti -1c
.RI "char * \fBhandleComLine\fP (int argc, char *argv[], bool *aFlag, char **outFileName)"
.br
.ti -1c
.RI "void \fBwriteWtf\fP (\fBText\fP *codeFile, FILE *outFile, int tags[512])"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "size_t \fBip\fP"
.br
.ti -1c
.RI "bool \fBerrors\fP"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define DEF_CMD(name, num, arg, code)   CMD_##name = num,"

.PP
Definition at line 21 of file asm_head\&.h\&.
.SS "#define tagCheck( \&.\&.\&.)"
\fBValue:\fP
.PP
.nf
    if (outFile != NULL) { \
    __VA_ARGS__                              \
}
.fi
.PP
Definition at line 10 of file asm_head\&.h\&.
.SS "#define writeBin(var, outFile)   \fBwriteBinInternal\fP (&var, outFile, sizeof (var))"

.PP
Definition at line 34 of file asm_head\&.h\&.
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBCMD\fP"

.PP
Definition at line 18 of file asm_head\&.h\&.
.SS "enum \fBmasks\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIMASK_RAM \fP\fP
.TP
\fB\fIMASK_REG \fP\fP
.TP
\fB\fIMASK_IMM \fP\fP
.TP
\fB\fIMASK_CMD \fP\fP
.TP
\fB\fIMASK_RAM \fP\fP
.TP
\fB\fIMASK_REG \fP\fP
.TP
\fB\fIMASK_IMM \fP\fP
.TP
\fB\fIMASK_CMD \fP\fP
.PP
Definition at line 26 of file asm_head\&.h\&.
.SH "Function Documentation"
.PP 
.SS "void handleArg (\fBText\fP * code, int line, FILE * outFile, char cmdNum, int tags[512])"

.PP
Definition at line 12 of file asm_funcs\&.cpp\&.
.SS "char* handleComLine (int argc, char * argv[], bool * aFlag, char ** outFileName)"

.PP
Definition at line 140 of file asm_funcs\&.cpp\&.
.SS "void writeBinInternal (void * val, FILE * outFile, size_t sizeOfVar)"

.PP
Definition at line 3 of file asm_funcs\&.cpp\&.
.SS "void writeWtf (\fBText\fP * codeFile, FILE * outFile, int tags[512])"

.PP
Definition at line 199 of file asm_funcs\&.cpp\&.
.SH "Variable Documentation"
.PP 
.SS "bool errors\fC [extern]\fP"

.PP
Definition at line 5 of file asm\&.cpp\&.
.SS "size_t ip\fC [extern]\fP"

.PP
Definition at line 3 of file asm\&.cpp\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Soft cpu from the source code\&.
