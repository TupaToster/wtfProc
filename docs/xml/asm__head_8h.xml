<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="asm__head_8h" kind="file" language="C++">
    <compoundname>asm_head.h</compoundname>
    <includes refid="globalization_8h" local="yes">D:\los_projectados\wtfProc\lib\globalization.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">assert.h</includes>
    <includedby refid="asm_8cpp" local="yes">asm/asm.cpp</includedby>
    <includedby refid="asm__funcs_8cpp" local="yes">asm/asm_funcs.cpp</includedby>
    <incdepgraph>
      <node id="5">
        <label>assert.h</label>
      </node>
      <node id="4">
        <label>stdlib.h</label>
      </node>
      <node id="2">
        <label>D:\los_projectados\wtfProc\lib\globalization.h</label>
        <link refid="globalization_8h"/>
      </node>
      <node id="1">
        <label>asm/asm_head.h</label>
        <link refid="asm__head_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>asm/asm.cpp</label>
        <link refid="asm_8cpp"/>
      </node>
      <node id="3">
        <label>asm/asm_funcs.cpp</label>
        <link refid="asm__funcs_8cpp"/>
      </node>
      <node id="1">
        <label>asm/asm_head.h</label>
        <link refid="asm__head_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="asm__head_8h_1acf265fc2407fbc5c1aa5909a1bc4e0d3" prot="public" static="no">
        <name>tagCheck</name>
        <param><defname>...</defname></param>
        <initializer>    if (outFile != NULL) { \
    __VA_ARGS__                              \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="asm/asm_head.h" line="10" column="9" bodyfile="asm/asm_head.h" bodystart="10" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="asm__head_8h_1aa020607c1c6794b5b426e2d70c488153" prot="public" static="no">
        <name>DEF_CMD</name>
        <param><defname>name</defname></param>
        <param><defname>num</defname></param>
        <param><defname>arg</defname></param>
        <param><defname>code</defname></param>
        <initializer>CMD_##name = num,</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="asm/asm_head.h" line="21" column="18" bodyfile="asm/asm_head.h" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="asm__head_8h_1ac6991086843a1f1acea03a81d84aebba" prot="public" static="no">
        <name>writeBin</name>
        <param><defname>var</defname></param>
        <param><defname>outFile</defname></param>
        <initializer><ref refid="asm__head_8h_1a3dbf87d57f9f11d4e10cf74b6887a21a" kindref="member">writeBinInternal</ref> (&amp;var, outFile, sizeof (var))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="asm/asm_head.h" line="34" column="9" bodyfile="asm/asm_head.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="asm__head_8h_1a04887de32e1f60f8dc157312b8f27665" prot="public" static="no" strong="no">
        <type></type>
        <name>CMD</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="asm/asm_head.h" line="18" column="1" bodyfile="asm/asm_head.h" bodystart="18" bodyend="24"/>
      </memberdef>
      <memberdef kind="enum" id="asm__head_8h_1adad90fa030af56592ad194a41341ffcd" prot="public" static="no" strong="no">
        <type></type>
        <name>masks</name>
        <enumvalue id="asm__head_8h_1adad90fa030af56592ad194a41341ffcda4db5e001347c36d91aefd5b7fd523ba2" prot="public">
          <name>MASK_RAM</name>
          <initializer>= 1&lt;&lt;7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="asm__head_8h_1adad90fa030af56592ad194a41341ffcda9782d5c7f682da2c29f879755e3b028d" prot="public">
          <name>MASK_REG</name>
          <initializer>= 1&lt;&lt;6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="asm__head_8h_1adad90fa030af56592ad194a41341ffcda0a4eede2840471178edb9122dcba577f" prot="public">
          <name>MASK_IMM</name>
          <initializer>= 1&lt;&lt;5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="asm__head_8h_1adad90fa030af56592ad194a41341ffcda9c0d0344611dae38b63521e9e87b4c70" prot="public">
          <name>MASK_CMD</name>
          <initializer>= (1&lt;&lt;5) - 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="asm__head_8h_1adad90fa030af56592ad194a41341ffcda4db5e001347c36d91aefd5b7fd523ba2" prot="public">
          <name>MASK_RAM</name>
          <initializer>= 1&lt;&lt;7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="asm__head_8h_1adad90fa030af56592ad194a41341ffcda9782d5c7f682da2c29f879755e3b028d" prot="public">
          <name>MASK_REG</name>
          <initializer>= 1&lt;&lt;6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="asm__head_8h_1adad90fa030af56592ad194a41341ffcda0a4eede2840471178edb9122dcba577f" prot="public">
          <name>MASK_IMM</name>
          <initializer>= 1&lt;&lt;5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="asm__head_8h_1adad90fa030af56592ad194a41341ffcda9c0d0344611dae38b63521e9e87b4c70" prot="public">
          <name>MASK_CMD</name>
          <initializer>= (1&lt;&lt;5) - 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="asm/asm_head.h" line="26" column="1" bodyfile="asm/asm_head.h" bodystart="26" bodyend="32"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="asm__head_8h_1a5c1a69eec57cefaee3f692279022198b" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t ip</definition>
        <argsstring></argsstring>
        <name>ip</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="asm/asm_head.h" line="14" column="15" bodyfile="asm/asm.cpp" bodystart="3" bodyend="-1" declfile="asm/asm_head.h" declline="14" declcolumn="15"/>
      </memberdef>
      <memberdef kind="variable" id="asm__head_8h_1ace8c8b51e3dcde290dd6b8a7bc5feba0" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool errors</definition>
        <argsstring></argsstring>
        <name>errors</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="asm/asm_head.h" line="16" column="13" bodyfile="asm/asm.cpp" bodystart="5" bodyend="-1" declfile="asm/asm_head.h" declline="16" declcolumn="13"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="asm__head_8h_1a3dbf87d57f9f11d4e10cf74b6887a21a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void writeBinInternal</definition>
        <argsstring>(void *val, FILE *outFile, size_t sizeOfVar)</argsstring>
        <name>writeBinInternal</name>
        <param>
          <type>void *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>outFile</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sizeOfVar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="asm/asm_head.h" line="36" column="6" bodyfile="asm/asm_funcs.cpp" bodystart="3" bodyend="10" declfile="asm/asm_head.h" declline="36" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="asm__head_8h_1afebc5259c059f1c13b2c3eb589bbd778" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void handleArg</definition>
        <argsstring>(Text *code, int line, FILE *outFile, char cmdNum, int tags[512])</argsstring>
        <name>handleArg</name>
        <param>
          <type><ref refid="struct_text" kindref="compound">Text</ref> *</type>
          <declname>code</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>outFile</declname>
        </param>
        <param>
          <type>char</type>
          <declname>cmdNum</declname>
        </param>
        <param>
          <type>int</type>
          <declname>tags</declname>
          <array>[512]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="asm/asm_head.h" line="38" column="6" bodyfile="asm/asm_funcs.cpp" bodystart="12" bodyend="138" declfile="asm/asm_head.h" declline="38" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="asm__head_8h_1ad94c08d203bdf6cd4fdad8a420073a85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* handleComLine</definition>
        <argsstring>(int argc, char *argv[], bool *aFlag, char **outFileName)</argsstring>
        <name>handleComLine</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <param>
          <type>bool *</type>
          <declname>aFlag</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>outFileName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="asm/asm_head.h" line="40" column="6" bodyfile="asm/asm_funcs.cpp" bodystart="140" bodyend="197" declfile="asm/asm_head.h" declline="40" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="asm__head_8h_1aa4ecb6747b94442217ee22b2df052036" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void writeWtf</definition>
        <argsstring>(Text *codeFile, FILE *outFile, int tags[512])</argsstring>
        <name>writeWtf</name>
        <param>
          <type><ref refid="struct_text" kindref="compound">Text</ref> *</type>
          <declname>codeFile</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>outFile</declname>
        </param>
        <param>
          <type>int</type>
          <declname>tags</declname>
          <array>[512]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="asm/asm_head.h" line="42" column="6" bodyfile="asm/asm_funcs.cpp" bodystart="199" bodyend="246" declfile="asm/asm_head.h" declline="42" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="globalization_8h" kindref="compound">D:\los_projectados\wtfProc\lib\globalization.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>header(flog)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>header(cmd)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>header(text)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10" refid="asm__head_8h_1acf265fc2407fbc5c1aa5909a1bc4e0d3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>tagCheck(...)<sp/>if<sp/>(outFile<sp/>!=<sp/>NULL)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="11"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>__VA_ARGS__<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="12"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="asm__head_8h_1a5c1a69eec57cefaee3f692279022198b" kindref="member">ip</ref>;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="asm__head_8h_1ace8c8b51e3dcde290dd6b8a7bc5feba0" kindref="member">errors</ref>;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18" refid="asm__head_8h_1a04887de32e1f60f8dc157312b8f27665" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="asm__head_8h_1a04887de32e1f60f8dc157312b8f27665" kindref="member">CMD</ref><sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#undef<sp/>DEF_CMD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="asm__head_8h_1aa020607c1c6794b5b426e2d70c488153" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>DEF_CMD(name,<sp/>num,<sp/>arg,<sp/>code)<sp/>CMD_##name<sp/>=<sp/>num,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#include<sp/>header<sp/>(cmd)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal">};</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26" refid="asm__head_8h_1adad90fa030af56592ad194a41341ffcd" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="asm__head_8h_1adad90fa030af56592ad194a41341ffcd" kindref="member">masks</ref><sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="asm__head_8h_1adad90fa030af56592ad194a41341ffcda4db5e001347c36d91aefd5b7fd523ba2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="asm__head_8h_1adad90fa030af56592ad194a41341ffcda4db5e001347c36d91aefd5b7fd523ba2" kindref="member">MASK_RAM</ref><sp/>=<sp/>1&lt;&lt;7,</highlight></codeline>
<codeline lineno="29" refid="asm__head_8h_1adad90fa030af56592ad194a41341ffcda9782d5c7f682da2c29f879755e3b028d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="asm__head_8h_1adad90fa030af56592ad194a41341ffcda9782d5c7f682da2c29f879755e3b028d" kindref="member">MASK_REG</ref><sp/>=<sp/>1&lt;&lt;6,</highlight></codeline>
<codeline lineno="30" refid="asm__head_8h_1adad90fa030af56592ad194a41341ffcda0a4eede2840471178edb9122dcba577f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="asm__head_8h_1adad90fa030af56592ad194a41341ffcda0a4eede2840471178edb9122dcba577f" kindref="member">MASK_IMM</ref><sp/>=<sp/>1&lt;&lt;5,</highlight></codeline>
<codeline lineno="31" refid="asm__head_8h_1adad90fa030af56592ad194a41341ffcda9c0d0344611dae38b63521e9e87b4c70" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="asm__head_8h_1adad90fa030af56592ad194a41341ffcda9c0d0344611dae38b63521e9e87b4c70" kindref="member">MASK_CMD</ref><sp/>=<sp/>(1&lt;&lt;5)<sp/>-<sp/>1,</highlight></codeline>
<codeline lineno="32"><highlight class="normal">};</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="asm__head_8h_1ac6991086843a1f1acea03a81d84aebba" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>writeBin(var,<sp/>outFile)<sp/>writeBinInternal<sp/>(&amp;var,<sp/>outFile,<sp/>sizeof<sp/>(var))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="asm__head_8h_1a3dbf87d57f9f11d4e10cf74b6887a21a" kindref="member">writeBinInternal</ref><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>val,<sp/>FILE*<sp/>outFile,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizeOfVar);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="asm__head_8h_1afebc5259c059f1c13b2c3eb589bbd778" kindref="member">handleArg</ref><sp/>(<ref refid="struct_text" kindref="compound">Text</ref>*<sp/>code,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,<sp/>FILE*<sp/>outFile,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>cmdNum,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tags[512]);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="asm__head_8h_1ad94c08d203bdf6cd4fdad8a420073a85" kindref="member">handleComLine</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[],<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>aFlag,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>outFileName);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="asm__head_8h_1aa4ecb6747b94442217ee22b2df052036" kindref="member">writeWtf</ref><sp/>(<ref refid="struct_text" kindref="compound">Text</ref>*<sp/>codeFile,<sp/>FILE*<sp/>outFile,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tags[512]);</highlight></codeline>
    </programlisting>
    <location file="asm/asm_head.h"/>
  </compounddef>
</doxygen>
