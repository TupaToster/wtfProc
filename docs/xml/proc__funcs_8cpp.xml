<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="proc__funcs_8cpp" kind="file" language="C++">
    <compoundname>proc_funcs.cpp</compoundname>
    <includes refid="proc__head_8h" local="yes">proc_head.h</includes>
    <incdepgraph>
      <node id="6">
        <label>assert.h</label>
      </node>
      <node id="5">
        <label>stdlib.h</label>
      </node>
      <node id="2">
        <label>proc_head.h</label>
        <link refid="proc__head_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>D:\los_projectados\wtfProc\lib\globalization.h</label>
        <link refid="globalization_8h"/>
      </node>
      <node id="7">
        <label>math.h</label>
      </node>
      <node id="1">
        <label>processor/proc_funcs.cpp</label>
        <link refid="proc__funcs_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="proc__funcs_8cpp_1aa020607c1c6794b5b426e2d70c488153" prot="public" static="no">
        <name>DEF_CMD</name>
        <param><defname>name</defname></param>
        <param><defname>num</defname></param>
        <param><defname>arg</defname></param>
        <param><defname>code</defname></param>
        <initializer>                case CMD_##name:                                     \
                                                                     \
                    if      (arg == 1) valArg = <ref refid="proc__head_8h_1a6789f3dda443cc297083852dad3fdf66" kindref="member">getValueArg</ref> (cpu);   \
                    else if (arg == 2) ptrArg = <ref refid="proc__head_8h_1a6bf71e3a4241fd51c9f3d5c36f673037" kindref="member">getPtrArg</ref> (cpu);     \
                    else if (arg == 3) ipArg  = <ref refid="proc__head_8h_1a2fdff7c8f755b16495c35026ae397d44" kindref="member">getIpArg</ref> (cpu);      \
                    code                                             \
                break;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="processor/proc_funcs.cpp" line="200" column="21"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="proc__funcs_8cpp_1a49e378fb51788d3e488e0fcf7576ebba" prot="public" static="no" mutable="no">
        <type>char</type>
        <definition>char Proc_version[3]</definition>
        <argsstring>[3]</argsstring>
        <name>Proc_version</name>
        <initializer>= &quot;02&quot;</initializer>
        <briefdescription>
<para>Variable for processor version, declared in <ref refid="proc__funcs_8cpp" kindref="compound">proc_funcs.cpp</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="processor/proc_funcs.cpp" line="3" column="6" bodyfile="processor/proc_funcs.cpp" bodystart="3" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="proc__funcs_8cpp_1a3a519805ef72bd5d68daafbaaf66d3f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* handleComLine</definition>
        <argsstring>(int argc, char *argv[])</argsstring>
        <name>handleComLine</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <briefdescription>
<para>Handles command line arguments. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>argc</parametername>
</parameternamelist>
<parameterdescription>
<para>Amount of args </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argv</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of args </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Name of file to read from </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="processor/proc_funcs.cpp" line="5" column="6" bodyfile="processor/proc_funcs.cpp" bodystart="5" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="proc__funcs_8cpp_1aea285898f9e99e5de92495f68bc409e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ProcCtor</definition>
        <argsstring>(Proc *cpu)</argsstring>
        <name>ProcCtor</name>
        <param>
          <type><ref refid="struct_proc" kindref="compound">Proc</ref> *</type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
<para>Constructs a <ref refid="struct_proc" kindref="compound">Proc</ref> var. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cpu</parametername>
</parameternamelist>
<parameterdescription>
<para>Ptr to var to construct </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="processor/proc_funcs.cpp" line="38" column="6" bodyfile="processor/proc_funcs.cpp" bodystart="38" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="proc__funcs_8cpp_1aeb16925431194abc0b606715b1b35e48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ProcDtor</definition>
        <argsstring>(Proc *cpu)</argsstring>
        <name>ProcDtor</name>
        <param>
          <type><ref refid="struct_proc" kindref="compound">Proc</ref> *</type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
<para>Destructs a <ref refid="struct_proc" kindref="compound">Proc</ref> var. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cpu</parametername>
</parameternamelist>
<parameterdescription>
<para>Ptr to var to destruct </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="processor/proc_funcs.cpp" line="53" column="6" bodyfile="processor/proc_funcs.cpp" bodystart="53" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="proc__funcs_8cpp_1a8de894df7ac03647ab4593bbd226e7ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void checkFileSign</definition>
        <argsstring>(Proc *cpu)</argsstring>
        <name>checkFileSign</name>
        <param>
          <type><ref refid="struct_proc" kindref="compound">Proc</ref> *</type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
<para>Checks for file signature and proc version. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cpu</parametername>
</parameternamelist>
<parameterdescription>
<para>Ptr to var to dump </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="processor/proc_funcs.cpp" line="64" column="6" bodyfile="processor/proc_funcs.cpp" bodystart="64" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="proc__funcs_8cpp_1a6789f3dda443cc297083852dad3fdf66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cmd_8h_1a48ca3ff2cfe9aa2266d0fd50b0858a80" kindref="member">elem_t</ref></type>
        <definition>elem_t getValueArg</definition>
        <argsstring>(Proc *cpu)</argsstring>
        <name>getValueArg</name>
        <param>
          <type><ref refid="struct_proc" kindref="compound">Proc</ref> *</type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
<para>Gets a elem_t arg as a value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cpu</parametername>
</parameternamelist>
<parameterdescription>
<para>Ptr to cpu to read from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>elem_t value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="processor/proc_funcs.cpp" line="86" column="8" bodyfile="processor/proc_funcs.cpp" bodystart="86" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="proc__funcs_8cpp_1a6bf71e3a4241fd51c9f3d5c36f673037" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cmd_8h_1a48ca3ff2cfe9aa2266d0fd50b0858a80" kindref="member">elem_t</ref> *</type>
        <definition>elem_t* getPtrArg</definition>
        <argsstring>(Proc *cpu)</argsstring>
        <name>getPtrArg</name>
        <param>
          <type><ref refid="struct_proc" kindref="compound">Proc</ref> *</type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
<para>Gets a elem_t* arg. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cpu</parametername>
</parameternamelist>
<parameterdescription>
<para>Ptr to cpu to read from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>elem_t* value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="processor/proc_funcs.cpp" line="110" column="8" bodyfile="processor/proc_funcs.cpp" bodystart="110" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="proc__funcs_8cpp_1a2fdff7c8f755b16495c35026ae397d44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int getIpArg</definition>
        <argsstring>(Proc *cpu)</argsstring>
        <name>getIpArg</name>
        <param>
          <type><ref refid="struct_proc" kindref="compound">Proc</ref> *</type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
<para>Gets an ip. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cpu</parametername>
</parameternamelist>
<parameterdescription>
<para>Ptr to cpu to read from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="processor/proc_funcs.cpp" line="142" column="5" bodyfile="processor/proc_funcs.cpp" bodystart="142" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="proc__funcs_8cpp_1abbcaa80443c83c47ea972ef5927664fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ProcDumpInside</definition>
        <argsstring>(Proc *cpu)</argsstring>
        <name>ProcDumpInside</name>
        <param>
          <type><ref refid="struct_proc" kindref="compound">Proc</ref> *</type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
<para>Dumps processor into logs_out. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cpu</parametername>
</parameternamelist>
<parameterdescription>
<para>Ptr to var to dump </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="processor/proc_funcs.cpp" line="153" column="6" bodyfile="processor/proc_funcs.cpp" bodystart="153" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="proc__funcs_8cpp_1ac394503074d575a0ad623a66d084b4f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ProcRunCode</definition>
        <argsstring>(Proc *cpu)</argsstring>
        <name>ProcRunCode</name>
        <param>
          <type><ref refid="struct_proc" kindref="compound">Proc</ref> *</type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
<para>Runs code. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cpu</parametername>
</parameternamelist>
<parameterdescription>
<para>Ptr to var to run from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="processor/proc_funcs.cpp" line="187" column="6" bodyfile="processor/proc_funcs.cpp" bodystart="187" bodyend="218"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="proc__head_8h" kindref="compound">proc_head.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3" refid="proc__funcs_8cpp_1a49e378fb51788d3e488e0fcf7576ebba" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="proc__funcs_8cpp_1a49e378fb51788d3e488e0fcf7576ebba" kindref="member">Proc_version</ref>[3]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;02&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5" refid="proc__funcs_8cpp_1a3a519805ef72bd5d68daafbaaf66d3f2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="proc__funcs_8cpp_1a3a519805ef72bd5d68daafbaaf66d3f2" kindref="member">handleComLine</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[])<sp/>{</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>codeFileName<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(argc)<sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf<sp/>(</highlight><highlight class="stringliteral">&quot;Good<sp/>usage<sp/>of<sp/>wtfproc.exe:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;./wtfproc.exe<sp/>fileName\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;fileName<sp/>-<sp/>name<sp/>of<sp/>file<sp/>to<sp/>run<sp/>(usually<sp/>a<sp/>.wtf)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit<sp/>(0);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>codeFileName<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>calloc<sp/>(strlen<sp/>(argv[1])<sp/>+<sp/>1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(char));</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert<sp/>(codeFileName<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy<sp/>(codeFileName,<sp/>argv[1]);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf<sp/>(</highlight><highlight class="stringliteral">&quot;Wrong<sp/>arg&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(0);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>codeFileName;</highlight></codeline>
<codeline lineno="36"><highlight class="normal">}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="proc__funcs_8cpp_1aea285898f9e99e5de92495f68bc409e3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="proc__funcs_8cpp_1aea285898f9e99e5de92495f68bc409e3" kindref="member">ProcCtor</ref><sp/>(<ref refid="struct_proc" kindref="compound">Proc</ref>*<sp/>cpu)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>cpu-&gt;<ref refid="struct_proc_1a3f965d8be71bc5b90fe4be02a5b7451f" kindref="member">code</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>cpu-&gt;<ref refid="struct_proc_1a7dcaf8c7ceca34684ad6425a7cf8383f" kindref="member">regs</ref>[<ref refid="proc__head_8h_1ad53b1ff8af38a0fc111be7b9fd536191a7c4e2b501efe08a200520265ddd187d8" kindref="member">rax</ref>]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>cpu-&gt;<ref refid="struct_proc_1a7dcaf8c7ceca34684ad6425a7cf8383f" kindref="member">regs</ref>[<ref refid="proc__head_8h_1ad53b1ff8af38a0fc111be7b9fd536191a5167d112e4a951e0101af94ac6632619" kindref="member">rbx</ref>]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>cpu-&gt;<ref refid="struct_proc_1a7dcaf8c7ceca34684ad6425a7cf8383f" kindref="member">regs</ref>[<ref refid="proc__head_8h_1ad53b1ff8af38a0fc111be7b9fd536191afd03e081e40ff976547d3f5246910740" kindref="member">rcx</ref>]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>cpu-&gt;<ref refid="struct_proc_1a7dcaf8c7ceca34684ad6425a7cf8383f" kindref="member">regs</ref>[<ref refid="proc__head_8h_1ad53b1ff8af38a0fc111be7b9fd536191a6cfff3aee7c6bc56dad8b0dff2a4fe98" kindref="member">rdx</ref>]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>cpu-&gt;<ref refid="struct_proc_1a7dcaf8c7ceca34684ad6425a7cf8383f" kindref="member">regs</ref>[<ref refid="proc__head_8h_1ad53b1ff8af38a0fc111be7b9fd536191a99f5dab094268bbd7e983e639227a450" kindref="member">r0x</ref>]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>cpu-&gt;<ref refid="struct_proc_1a3f965d8be71bc5b90fe4be02a5b7451f" kindref="member">code</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>cpu-&gt;<ref refid="struct_proc_1a035d414acb2f1e68268e1e01b31d3639" kindref="member">ip</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>cpu-&gt;<ref refid="struct_proc_1a9c68bfb7e83ba9b17440159dade966aa" kindref="member">stk</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="stack_8cpp_1a7f20099985e66f408b861724863a2f1b" kindref="member">StackCtor</ref><sp/>();</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>cpu-&gt;<ref refid="struct_proc_1abf87102fddf47ab184fd376d2ce8d685" kindref="member">funcIp</ref><sp/><sp/><sp/><sp/>=<sp/><ref refid="stack_8cpp_1a7f20099985e66f408b861724863a2f1b" kindref="member">StackCtor</ref><sp/>();</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>cpu-&gt;<ref refid="struct_proc_1a8ec1b6bbc3ed71f89837c24999bc42d4" kindref="member">ram</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(<ref refid="cmd_8h_1a48ca3ff2cfe9aa2266d0fd50b0858a80" kindref="member">elem_t</ref>*)<sp/>calloc<sp/>(100,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(<ref refid="cmd_8h_1a48ca3ff2cfe9aa2266d0fd50b0858a80" kindref="member">elem_t</ref>));</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="proc__funcs_8cpp_1aeb16925431194abc0b606715b1b35e48" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="proc__funcs_8cpp_1aeb16925431194abc0b606715b1b35e48" kindref="member">ProcDtor</ref><sp/>(<ref refid="struct_proc" kindref="compound">Proc</ref>*<sp/>cpu)<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>free<sp/>(cpu-&gt;<ref refid="struct_proc_1a3f965d8be71bc5b90fe4be02a5b7451f" kindref="member">code</ref>);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>free<sp/>(cpu-&gt;<ref refid="struct_proc_1a8ec1b6bbc3ed71f89837c24999bc42d4" kindref="member">ram</ref>);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>free<sp/>(cpu-&gt;<ref refid="struct_proc_1a7dcaf8c7ceca34684ad6425a7cf8383f" kindref="member">regs</ref>);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>cpu-&gt;<ref refid="struct_proc_1a3e7ddbbef3cb2bdd7643696481a7dc9a" kindref="member">codeSize</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>cpu-&gt;<ref refid="struct_proc_1a035d414acb2f1e68268e1e01b31d3639" kindref="member">ip</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8cpp_1a7a748c43563a85e8c5d154997597c4bb" kindref="member">StackDtor</ref><sp/>(&amp;cpu-&gt;<ref refid="struct_proc_1a9c68bfb7e83ba9b17440159dade966aa" kindref="member">stk</ref>);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8cpp_1a7a748c43563a85e8c5d154997597c4bb" kindref="member">StackDtor</ref><sp/>(&amp;cpu-&gt;<ref refid="struct_proc_1abf87102fddf47ab184fd376d2ce8d685" kindref="member">funcIp</ref>);</highlight></codeline>
<codeline lineno="62"><highlight class="normal">}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64" refid="proc__funcs_8cpp_1a8de894df7ac03647ab4593bbd226e7ca" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="proc__funcs_8cpp_1a8de894df7ac03647ab4593bbd226e7ca" kindref="member">checkFileSign</ref><sp/>(<ref refid="struct_proc" kindref="compound">Proc</ref>*<sp/>cpu)<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(cpu-&gt;<ref refid="struct_proc_1a3f965d8be71bc5b90fe4be02a5b7451f" kindref="member">code</ref>[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;C&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>and<sp/><sp/><sp/>cpu-&gt;<ref refid="struct_proc_1a3f965d8be71bc5b90fe4be02a5b7451f" kindref="member">code</ref>[1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;P&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf<sp/>(</highlight><highlight class="stringliteral">&quot;Wrong<sp/>file<sp/>signature&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit<sp/>(0);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(cpu-&gt;<ref refid="struct_proc_1a3f965d8be71bc5b90fe4be02a5b7451f" kindref="member">code</ref>[2]<sp/>==<sp/><ref refid="proc__funcs_8cpp_1a49e378fb51788d3e488e0fcf7576ebba" kindref="member">Proc_version</ref>[0]</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>and<sp/><sp/><sp/>cpu-&gt;<ref refid="struct_proc_1a3f965d8be71bc5b90fe4be02a5b7451f" kindref="member">code</ref>[3]<sp/>==<sp/><ref refid="proc__funcs_8cpp_1a49e378fb51788d3e488e0fcf7576ebba" kindref="member">Proc_version</ref>[1]))<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf<sp/>(</highlight><highlight class="stringliteral">&quot;Wrong<sp/>file<sp/>version<sp/>\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;file<sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>%.*s<sp/><sp/><sp/>\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;processor<sp/>:<sp/>%s<sp/><sp/><sp/><sp/><sp/>\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit<sp/>(0);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>cpu-&gt;<ref refid="struct_proc_1a035d414acb2f1e68268e1e01b31d3639" kindref="member">ip</ref><sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86" refid="proc__funcs_8cpp_1a6789f3dda443cc297083852dad3fdf66" refkind="member"><highlight class="normal"><ref refid="cmd_8h_1a48ca3ff2cfe9aa2266d0fd50b0858a80" kindref="member">elem_t</ref><sp/><ref refid="proc__funcs_8cpp_1a6789f3dda443cc297083852dad3fdf66" kindref="member">getValueArg</ref><sp/>(<ref refid="struct_proc" kindref="compound">Proc</ref>*<sp/>cpu)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>command<sp/>=<sp/>cpu-&gt;<ref refid="struct_proc_1a3f965d8be71bc5b90fe4be02a5b7451f" kindref="member">code</ref>[cpu-&gt;<ref refid="struct_proc_1a035d414acb2f1e68268e1e01b31d3639" kindref="member">ip</ref><sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cmd_8h_1a48ca3ff2cfe9aa2266d0fd50b0858a80" kindref="member">elem_t</ref><sp/>retVal<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(command<sp/>&amp;<sp/><ref refid="asm__head_8h_1adad90fa030af56592ad194a41341ffcda9782d5c7f682da2c29f879755e3b028d" kindref="member">MASK_REG</ref>)<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retVal<sp/>+=<sp/>cpu-&gt;<ref refid="struct_proc_1a7dcaf8c7ceca34684ad6425a7cf8383f" kindref="member">regs</ref>[cpu-&gt;<ref refid="struct_proc_1a3f965d8be71bc5b90fe4be02a5b7451f" kindref="member">code</ref>[cpu-&gt;<ref refid="struct_proc_1a035d414acb2f1e68268e1e01b31d3639" kindref="member">ip</ref>]];</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cpu-&gt;<ref refid="struct_proc_1a035d414acb2f1e68268e1e01b31d3639" kindref="member">ip</ref><sp/>+=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(char);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(command<sp/>&amp;<sp/><ref refid="asm__head_8h_1adad90fa030af56592ad194a41341ffcda0a4eede2840471178edb9122dcba577f" kindref="member">MASK_IMM</ref>)<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retVal<sp/>+=<sp/>*(<ref refid="cmd_8h_1a48ca3ff2cfe9aa2266d0fd50b0858a80" kindref="member">elem_t</ref>*)(cpu-&gt;<ref refid="struct_proc_1a3f965d8be71bc5b90fe4be02a5b7451f" kindref="member">code</ref><sp/>+<sp/>cpu-&gt;<ref refid="struct_proc_1a035d414acb2f1e68268e1e01b31d3639" kindref="member">ip</ref>);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cpu-&gt;<ref refid="struct_proc_1a035d414acb2f1e68268e1e01b31d3639" kindref="member">ip</ref><sp/>+=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(retVal);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(command<sp/>&amp;<sp/><ref refid="asm__head_8h_1adad90fa030af56592ad194a41341ffcda4db5e001347c36d91aefd5b7fd523ba2" kindref="member">MASK_RAM</ref>)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retVal<sp/>=<sp/>cpu-&gt;<ref refid="struct_proc_1a8ec1b6bbc3ed71f89837c24999bc42d4" kindref="member">ram</ref>[(size_t)<sp/>retVal];</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retVal;</highlight></codeline>
<codeline lineno="108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110" refid="proc__funcs_8cpp_1a6bf71e3a4241fd51c9f3d5c36f673037" refkind="member"><highlight class="normal"><ref refid="cmd_8h_1a48ca3ff2cfe9aa2266d0fd50b0858a80" kindref="member">elem_t</ref>*<sp/><ref refid="proc__funcs_8cpp_1a6bf71e3a4241fd51c9f3d5c36f673037" kindref="member">getPtrArg</ref><sp/>(<ref refid="struct_proc" kindref="compound">Proc</ref>*<sp/>cpu)<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>command<sp/>=<sp/>cpu-&gt;<ref refid="struct_proc_1a3f965d8be71bc5b90fe4be02a5b7451f" kindref="member">code</ref>[cpu-&gt;<ref refid="struct_proc_1a035d414acb2f1e68268e1e01b31d3639" kindref="member">ip</ref><sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cmd_8h_1a48ca3ff2cfe9aa2266d0fd50b0858a80" kindref="member">elem_t</ref>*<sp/>retVal<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(command<sp/>&amp;<sp/><ref refid="asm__head_8h_1adad90fa030af56592ad194a41341ffcda9782d5c7f682da2c29f879755e3b028d" kindref="member">MASK_REG</ref>)<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retVal<sp/>=<sp/>cpu-&gt;<ref refid="struct_proc_1a7dcaf8c7ceca34684ad6425a7cf8383f" kindref="member">regs</ref><sp/>+<sp/>cpu-&gt;<ref refid="struct_proc_1a3f965d8be71bc5b90fe4be02a5b7451f" kindref="member">code</ref>[cpu-&gt;<ref refid="struct_proc_1a035d414acb2f1e68268e1e01b31d3639" kindref="member">ip</ref>];</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cpu-&gt;<ref refid="struct_proc_1a035d414acb2f1e68268e1e01b31d3639" kindref="member">ip</ref><sp/>+=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(char);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(command<sp/>&amp;<sp/><ref refid="asm__head_8h_1adad90fa030af56592ad194a41341ffcda0a4eede2840471178edb9122dcba577f" kindref="member">MASK_IMM</ref>)<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retVal<sp/>=<sp/>(<ref refid="cmd_8h_1a48ca3ff2cfe9aa2266d0fd50b0858a80" kindref="member">elem_t</ref>*)(cpu-&gt;<ref refid="struct_proc_1a3f965d8be71bc5b90fe4be02a5b7451f" kindref="member">code</ref><sp/>+<sp/>cpu-&gt;<ref refid="struct_proc_1a035d414acb2f1e68268e1e01b31d3639" kindref="member">ip</ref>);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(command<sp/>&amp;<sp/><ref refid="asm__head_8h_1adad90fa030af56592ad194a41341ffcda4db5e001347c36d91aefd5b7fd523ba2" kindref="member">MASK_RAM</ref>)<sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retVal<sp/>=<sp/>cpu-&gt;<ref refid="struct_proc_1a8ec1b6bbc3ed71f89837c24999bc42d4" kindref="member">ram</ref><sp/>+<sp/>(size_t)<sp/>*retVal<sp/>+<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>cpu-&gt;<ref refid="struct_proc_1a3f965d8be71bc5b90fe4be02a5b7451f" kindref="member">code</ref>[cpu-&gt;<ref refid="struct_proc_1a035d414acb2f1e68268e1e01b31d3639" kindref="member">ip</ref>];</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>exit(0);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cpu-&gt;<ref refid="struct_proc_1a035d414acb2f1e68268e1e01b31d3639" kindref="member">ip</ref><sp/>+=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(<ref refid="cmd_8h_1a48ca3ff2cfe9aa2266d0fd50b0858a80" kindref="member">elem_t</ref>);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(command<sp/>&amp;<sp/><ref refid="asm__head_8h_1adad90fa030af56592ad194a41341ffcda4db5e001347c36d91aefd5b7fd523ba2" kindref="member">MASK_RAM</ref>)<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retVal<sp/>=<sp/>cpu-&gt;<ref refid="struct_proc_1a8ec1b6bbc3ed71f89837c24999bc42d4" kindref="member">ram</ref><sp/>+<sp/>(size_t)<sp/>*retVal;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retVal;</highlight></codeline>
<codeline lineno="140"><highlight class="normal">}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142" refid="proc__funcs_8cpp_1a2fdff7c8f755b16495c35026ae397d44" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="proc__funcs_8cpp_1a2fdff7c8f755b16495c35026ae397d44" kindref="member">getIpArg</ref><sp/>(<ref refid="struct_proc" kindref="compound">Proc</ref>*<sp/>cpu)<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>command<sp/>=<sp/>cpu-&gt;<ref refid="struct_proc_1a3f965d8be71bc5b90fe4be02a5b7451f" kindref="member">code</ref>[cpu-&gt;<ref refid="struct_proc_1a035d414acb2f1e68268e1e01b31d3639" kindref="member">ip</ref><sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>retVal<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>retVal<sp/>=<sp/>*(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)(cpu-&gt;<ref refid="struct_proc_1a3f965d8be71bc5b90fe4be02a5b7451f" kindref="member">code</ref><sp/>+<sp/>cpu-&gt;<ref refid="struct_proc_1a035d414acb2f1e68268e1e01b31d3639" kindref="member">ip</ref>);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>cpu-&gt;<ref refid="struct_proc_1a035d414acb2f1e68268e1e01b31d3639" kindref="member">ip</ref><sp/>+=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(int);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retVal;</highlight></codeline>
<codeline lineno="151"><highlight class="normal">}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153" refid="proc__funcs_8cpp_1abbcaa80443c83c47ea972ef5927664fd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="proc__funcs_8cpp_1abbcaa80443c83c47ea972ef5927664fd" kindref="member">ProcDumpInside</ref><sp/>(<ref refid="struct_proc" kindref="compound">Proc</ref>*<sp/>cpu)<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>16;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="flog_8h_1aeaf684fac254929cc9d2194df499ace7" kindref="member">flogprintf</ref><sp/>(</highlight><highlight class="stringliteral">&quot;%02X<sp/>&quot;</highlight><highlight class="normal">,<sp/>i);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="flog_8h_1aeaf684fac254929cc9d2194df499ace7" kindref="member">flogprintf</ref><sp/>(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>16;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="flog_8h_1aeaf684fac254929cc9d2194df499ace7" kindref="member">flogprintf</ref><sp/>(</highlight><highlight class="stringliteral">&quot;%02X<sp/>&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)cpu-&gt;<ref refid="struct_proc_1a3f965d8be71bc5b90fe4be02a5b7451f" kindref="member">code</ref>[cpu-&gt;<ref refid="struct_proc_1a035d414acb2f1e68268e1e01b31d3639" kindref="member">ip</ref><sp/>-<sp/>1<sp/>-<sp/>(cpu-&gt;<ref refid="struct_proc_1a035d414acb2f1e68268e1e01b31d3639" kindref="member">ip</ref><sp/>-<sp/>1)<sp/>%<sp/>16<sp/>+<sp/>i]);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="flog_8h_1aeaf684fac254929cc9d2194df499ace7" kindref="member">flogprintf</ref><sp/>(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>(cpu-&gt;<ref refid="struct_proc_1a035d414acb2f1e68268e1e01b31d3639" kindref="member">ip</ref><sp/>-<sp/>1)<sp/>%<sp/>16;i++)<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="flog_8h_1aeaf684fac254929cc9d2194df499ace7" kindref="member">flogprintf</ref><sp/>(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="flog_8h_1aeaf684fac254929cc9d2194df499ace7" kindref="member">flogprintf</ref><sp/>(</highlight><highlight class="stringliteral">&quot;/|<sp/>ip<sp/>=<sp/>%d,<sp/>cpu-&gt;code[ip]<sp/>=<sp/>%02X\n&quot;</highlight><highlight class="normal">,<sp/>cpu-&gt;<ref refid="struct_proc_1a035d414acb2f1e68268e1e01b31d3639" kindref="member">ip</ref><sp/>-<sp/>1,<sp/>cpu-&gt;<ref refid="struct_proc_1a3f965d8be71bc5b90fe4be02a5b7451f" kindref="member">code</ref>[cpu-&gt;<ref refid="struct_proc_1a035d414acb2f1e68268e1e01b31d3639" kindref="member">ip</ref><sp/>-<sp/>1]);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="flog_8h_1aeaf684fac254929cc9d2194df499ace7" kindref="member">flogprintf</ref><sp/>(</highlight><highlight class="stringliteral">&quot;RAM:<sp/>\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;|<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>100;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="flog_8h_1aeaf684fac254929cc9d2194df499ace7" kindref="member">flogprintf</ref><sp/>(<ref refid="cmd_8h_1a4700822ad9e0ed0526e8cf27557fdc1f" kindref="member">elem_t_F</ref><sp/></highlight><highlight class="stringliteral">&quot;<sp/>|<sp/>&quot;</highlight><highlight class="normal">,<sp/>cpu-&gt;<ref refid="struct_proc_1a8ec1b6bbc3ed71f89837c24999bc42d4" kindref="member">ram</ref>[i]);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="flog_8h_1aeaf684fac254929cc9d2194df499ace7" kindref="member">flogprintf</ref><sp/>(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="185"><highlight class="normal">}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187" refid="proc__funcs_8cpp_1ac394503074d575a0ad623a66d084b4f0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="proc__funcs_8cpp_1ac394503074d575a0ad623a66d084b4f0" kindref="member">ProcRunCode</ref><sp/>(<ref refid="struct_proc" kindref="compound">Proc</ref>*<sp/>cpu)<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(cpu-&gt;<ref refid="struct_proc_1a035d414acb2f1e68268e1e01b31d3639" kindref="member">ip</ref><sp/>&lt;<sp/>cpu-&gt;<ref refid="struct_proc_1a3e7ddbbef3cb2bdd7643696481a7dc9a" kindref="member">codeSize</ref>)<sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="cmd_8h_1a48ca3ff2cfe9aa2266d0fd50b0858a80" kindref="member">elem_t</ref>*<sp/>ptrArg<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="cmd_8h_1a48ca3ff2cfe9aa2266d0fd50b0858a80" kindref="member">elem_t</ref><sp/><sp/>valArg<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>ipArg<sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>((cpu-&gt;<ref refid="struct_proc_1a3f965d8be71bc5b90fe4be02a5b7451f" kindref="member">code</ref>[cpu-&gt;<ref refid="struct_proc_1a035d414acb2f1e68268e1e01b31d3639" kindref="member">ip</ref>++]<sp/>&amp;<sp/><ref refid="asm__head_8h_1adad90fa030af56592ad194a41341ffcda9c0d0344611dae38b63521e9e87b4c70" kindref="member">MASK_CMD</ref>))<sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#undef<sp/>DEF_CMD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>DEF_CMD(name,<sp/>num,<sp/>arg,<sp/>code)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="201"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>CMD_##name:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="202"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="203"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/><sp/><sp/><sp/><sp/><sp/>(arg<sp/>==<sp/>1)<sp/>valArg<sp/>=<sp/>getValueArg<sp/>(cpu);<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="204"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(arg<sp/>==<sp/>2)<sp/>ptrArg<sp/>=<sp/>getPtrArg<sp/>(cpu);<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="205"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(arg<sp/>==<sp/>3)<sp/>ipArg<sp/><sp/>=<sp/>getIpArg<sp/>(cpu);<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="206"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>code<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="207"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#include<sp/>header(cmd)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf<sp/>(</highlight><highlight class="stringliteral">&quot;Wrong<sp/>command&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="proc__head_8h_1aa73c95cb26c92f512ae3fd6693f5a05b" kindref="member">ProcDump</ref><sp/>(cpu);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit<sp/>(0);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="processor/proc_funcs.cpp"/>
  </compounddef>
</doxygen>
