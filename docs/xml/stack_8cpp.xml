<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="stack_8cpp" kind="file" language="C++">
    <compoundname>stack.cpp</compoundname>
    <includes refid="stack_8h" local="yes">stack.h</includes>
    <incdepgraph>
      <node id="2">
        <label>stack.h</label>
        <link refid="stack_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>stdlib.h</label>
      </node>
      <node id="8">
        <label>string.h</label>
      </node>
      <node id="6">
        <label>typeinfo</label>
      </node>
      <node id="1">
        <label>lib/stack.cpp</label>
        <link refid="stack_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>cmd.h</label>
        <link refid="cmd_8h"/>
      </node>
      <node id="7">
        <label>time.h</label>
      </node>
      <node id="5">
        <label>flog.h</label>
        <link refid="flog_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="stack_8cpp_1a60bb9a078b9f0f215577719c53003db2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setPoisonInside</definition>
        <argsstring>(void *var, size_t sizeofVar)</argsstring>
        <name>setPoisonInside</name>
        <param>
          <type>void *</type>
          <declname>var</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sizeofVar</declname>
        </param>
        <briefdescription>
<para>Sets var to a poisoned state. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>var</parametername>
</parameternamelist>
<parameterdescription>
<para>ptr to var </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sizeofVar</parametername>
</parameternamelist>
<parameterdescription>
<para>sizeof var </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/stack.cpp" line="3" column="6" bodyfile="lib/stack.cpp" bodystart="3" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="stack_8cpp_1a00d7f278e2c87be49ce52a84f1f925cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool isPoisonInside</definition>
        <argsstring>(void *var, size_t sizeofVar)</argsstring>
        <name>isPoisonInside</name>
        <param>
          <type>void *</type>
          <declname>var</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sizeofVar</declname>
        </param>
        <briefdescription>
<para>Checks for a variable to be poisoned. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>var</parametername>
</parameternamelist>
<parameterdescription>
<para>ptr to var </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sizeofVar</parametername>
</parameternamelist>
<parameterdescription>
<para>size of var </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if poisoned, 0 if not </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/stack.cpp" line="19" column="6" bodyfile="lib/stack.cpp" bodystart="19" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="stack_8cpp_1a7f20099985e66f408b861724863a2f1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_stack" kindref="compound">Stack</ref></type>
        <definition>Stack StackCtor</definition>
        <argsstring>()</argsstring>
        <name>StackCtor</name>
        <briefdescription>
<para>Constructor for <ref refid="struct_stack" kindref="compound">Stack</ref>; Sets default capacity to 4. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Fully operable <ref refid="struct_stack" kindref="compound">Stack</ref> struct </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/stack.cpp" line="50" column="7" bodyfile="lib/stack.cpp" bodystart="50" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="stack_8cpp_1a7a748c43563a85e8c5d154997597c4bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void StackDtor</definition>
        <argsstring>(Stack *stk)</argsstring>
        <name>StackDtor</name>
        <param>
          <type><ref refid="struct_stack" kindref="compound">Stack</ref> *</type>
          <declname>stk</declname>
        </param>
        <briefdescription>
<para>Destroys a stack var. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stk</parametername>
</parameternamelist>
<parameterdescription>
<para>ptr to a destroyable variable </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/stack.cpp" line="76" column="6" bodyfile="lib/stack.cpp" bodystart="76" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="stack_8cpp_1a6d12097bc4af03b6c58d724a10758a64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void StackPush</definition>
        <argsstring>(Stack *stk, ELEM_TYPE val)</argsstring>
        <name>StackPush</name>
        <param>
          <type><ref refid="struct_stack" kindref="compound">Stack</ref> *</type>
          <declname>stk</declname>
        </param>
        <param>
          <type><ref refid="stack_8h_1a178d810735b72dab41331e71af8bfe99" kindref="member">ELEM_TYPE</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Places an element at the end of a stack. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stk</parametername>
</parameternamelist>
<parameterdescription>
<para>ptr to stack struct </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>value of an element to push </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/stack.cpp" line="98" column="6" bodyfile="lib/stack.cpp" bodystart="98" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="stack_8cpp_1a0941f0fc6decbec7accf45e25ea30eb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stack_8h_1a178d810735b72dab41331e71af8bfe99" kindref="member">ELEM_TYPE</ref></type>
        <definition>ELEM_TYPE StackPop</definition>
        <argsstring>(Stack *stk)</argsstring>
        <name>StackPop</name>
        <param>
          <type><ref refid="struct_stack" kindref="compound">Stack</ref> *</type>
          <declname>stk</declname>
        </param>
        <briefdescription>
<para>Removes an element from stack and returns its value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stk</parametername>
</parameternamelist>
<parameterdescription>
<para>ptr to stack </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>element that was removed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/stack.cpp" line="122" column="11" bodyfile="lib/stack.cpp" bodystart="122" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="stack_8cpp_1ad48351fcbd6c3d4ce84d470636525430" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ReallocStackSizeShift</definition>
        <argsstring>(Stack *stk, int delta)</argsstring>
        <name>ReallocStackSizeShift</name>
        <param>
          <type><ref refid="struct_stack" kindref="compound">Stack</ref> *</type>
          <declname>stk</declname>
        </param>
        <param>
          <type>int</type>
          <declname>delta</declname>
        </param>
        <briefdescription>
<para>Recallocates a whole stak with a size shift. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stk</parametername>
</parameternamelist>
<parameterdescription>
<para>ptr to stack </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delta</parametername>
</parameternamelist>
<parameterdescription>
<para>direction of size shift: &gt;0 - doubles the size, &lt;0 halves the size </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/stack.cpp" line="148" column="6" bodyfile="lib/stack.cpp" bodystart="148" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="stack_8cpp_1aa57535478796950bea6860e32e15b33c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void StackDumpInside</definition>
        <argsstring>(Stack *stk, const char *StackName, const char *fileName, const char *funcName, size_t line)</argsstring>
        <name>StackDumpInside</name>
        <param>
          <type><ref refid="struct_stack" kindref="compound">Stack</ref> *</type>
          <declname>stk</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>StackName</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fileName</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>funcName</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Dumps stack to logs_out. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stk</parametername>
</parameternamelist>
<parameterdescription>
<para>ptr to stack </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>StackName</parametername>
</parameternamelist>
<parameterdescription>
<para>name of stack </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fileName</parametername>
</parameternamelist>
<parameterdescription>
<para>name of file function was called at </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>funcName</parametername>
</parameternamelist>
<parameterdescription>
<para>name of func function was called at </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>line function was called at </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/stack.cpp" line="188" column="6" bodyfile="lib/stack.cpp" bodystart="188" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="stack_8cpp_1a2ec9d6428127070aa546211087cc603b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long long</type>
        <definition>unsigned long long StackErrCheck</definition>
        <argsstring>(Stack *stk)</argsstring>
        <name>StackErrCheck</name>
        <param>
          <type><ref refid="struct_stack" kindref="compound">Stack</ref> *</type>
          <declname>stk</declname>
        </param>
        <briefdescription>
<para>Prints errors drom a stack variable. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stk</parametername>
</parameternamelist>
<parameterdescription>
<para>ptr to stack </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>error code stk-&gt;errCode </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/stack.cpp" line="254" column="20" bodyfile="lib/stack.cpp" bodystart="254" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="stack_8cpp_1a4fe32a828f1513115f6abf92f8f9a066" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void StackLogPrintErrors</definition>
        <argsstring>(Stack *stk)</argsstring>
        <name>StackLogPrintErrors</name>
        <param>
          <type><ref refid="struct_stack" kindref="compound">Stack</ref> *</type>
          <declname>stk</declname>
        </param>
        <briefdescription>
<para>Prints errors for a StackDump func. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stk</parametername>
</parameternamelist>
<parameterdescription>
<para>ptr to stack </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/stack.cpp" line="302" column="6" bodyfile="lib/stack.cpp" bodystart="302" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="stack_8cpp_1a331eb5bc38763cfe6fead891904aac75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void StackCountHash</definition>
        <argsstring>(Stack *stk)</argsstring>
        <name>StackCountHash</name>
        <param>
          <type><ref refid="struct_stack" kindref="compound">Stack</ref> *</type>
          <declname>stk</declname>
        </param>
        <briefdescription>
<para>Counts hash for stack. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stk</parametername>
</parameternamelist>
<parameterdescription>
<para>ptr to stack </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/stack.cpp" line="328" column="6" bodyfile="lib/stack.cpp" bodystart="328" bodyend="362"/>
      </memberdef>
      <memberdef kind="function" id="stack_8cpp_1a81529740cd4cad5153f44e74c5c27e64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void StackVerifyHash</definition>
        <argsstring>(Stack *stk)</argsstring>
        <name>StackVerifyHash</name>
        <param>
          <type><ref refid="struct_stack" kindref="compound">Stack</ref> *</type>
          <declname>stk</declname>
        </param>
        <briefdescription>
<para>Verifies hash for stack (tells if it was changed without any <ref refid="struct_stack" kindref="compound">Stack</ref> specified functions) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stk</parametername>
</parameternamelist>
<parameterdescription>
<para>ptr to stack </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/stack.cpp" line="364" column="6" bodyfile="lib/stack.cpp" bodystart="364" bodyend="377"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="stack_8h" kindref="compound">stack.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3" refid="stack_8cpp_1a60bb9a078b9f0f215577719c53003db2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="stack_8cpp_1a60bb9a078b9f0f215577719c53003db2" kindref="member">setPoisonInside</ref><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>var,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizeofVar)<sp/>{</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(var<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(sizeofVar)<sp/>{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1<sp/>:<sp/>*((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/>)<sp/>var)<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="stack_8h_1a44ce32c2c103442949904e92a5803f44" kindref="member">POISON1</ref>;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2<sp/>:<sp/>*((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/>)<sp/>var)<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="stack_8h_1a8ee8fd516222866a78ba4a4aae2eb10c" kindref="member">POISON2</ref>;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4<sp/>:<sp/>*((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>var)<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="stack_8h_1a636a49191f541b52557a278556c8640e" kindref="member">POISON4</ref>;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>8<sp/>:<sp/>*((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*)<sp/>var)<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="stack_8h_1a87f9c88b5d9ecba250a24151f4f4f9b9" kindref="member">POISON8</ref>;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset<sp/>(var,<sp/><ref refid="stack_8h_1a44ce32c2c103442949904e92a5803f44" kindref="member">POISON1</ref>,<sp/>sizeofVar);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17"><highlight class="normal">}</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19" refid="stack_8cpp_1a00d7f278e2c87be49ce52a84f1f925cb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="stack_8cpp_1a00d7f278e2c87be49ce52a84f1f925cb" kindref="member">isPoisonInside</ref><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>var,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizeofVar)<sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(var<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(sizeofVar)<sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>*(<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/>)<sp/>var)<sp/>==<sp/><ref refid="stack_8h_1a44ce32c2c103442949904e92a5803f44" kindref="member">POISON1</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>*(<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/>)<sp/>var)<sp/>==<sp/><ref refid="stack_8h_1a8ee8fd516222866a78ba4a4aae2eb10c" kindref="member">POISON2</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>*(<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>var)<sp/>==<sp/><ref refid="stack_8h_1a636a49191f541b52557a278556c8640e" kindref="member">POISON4</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>8:</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>*(<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*)<sp/>var)<sp/>==<sp/><ref refid="stack_8h_1a87f9c88b5d9ecba250a24151f4f4f9b9" kindref="member">POISON8</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>sizeofVar;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*(<sp/>(<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>var)<sp/>+<sp/>i)<sp/>!=<sp/><ref refid="stack_8h_1a44ce32c2c103442949904e92a5803f44" kindref="member">POISON1</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="stack_8cpp_1a7f20099985e66f408b861724863a2f1b" refkind="member"><highlight class="normal"><ref refid="struct_stack" kindref="compound">Stack</ref><sp/><ref refid="stack_8cpp_1a7f20099985e66f408b861724863a2f1b" kindref="member">StackCtor</ref><sp/>()<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_stack" kindref="compound">Stack</ref><sp/>stk<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>stk.<ref refid="struct_stack_1a79193412a2c8b6a35f4ca6c45f0765dc" kindref="member">canL</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="stack_8h_1ac5ba2c9a466d94cdd0fe7324a4568dbf" kindref="member">CANL</ref>;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>stk.<ref refid="struct_stack_1ab067c98a0541b1d261f6c44892eb08c5" kindref="member">canR</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="stack_8h_1af4177486d72b0452c84830f8b67464a8" kindref="member">CANR</ref>;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>stk.<ref refid="struct_stack_1a65b24b547c77ac4b5e6dbdc0fd6a3283" kindref="member">hash</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>stk.<ref refid="struct_stack_1a3a469595caaaf49bbce059efabbe07b5" kindref="member">size</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>stk.<ref refid="struct_stack_1afb6d4ad9d2904c20d50102d310c963e0" kindref="member">capacity</ref><sp/><sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>stk.<ref refid="struct_stack_1aed401c797b1e17541ad03a3fded5187d" kindref="member">errCode</ref><sp/><sp/><sp/>=<sp/><ref refid="stack_8h_1abedba404d3287b5f1ba88ede8463da4bad8b76af209cd7ba83b4ebf33ba1637b2" kindref="member">ok</ref>;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>stk.<ref refid="struct_stack_1a94f7a65fb55d15a76270929f5b9c6397" kindref="member">stack</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>(<ref refid="stack_8h_1a178d810735b72dab41331e71af8bfe99" kindref="member">ELEM_TYPE</ref>*)<sp/>calloc<sp/>(stk.<ref refid="struct_stack_1afb6d4ad9d2904c20d50102d310c963e0" kindref="member">capacity</ref><sp/>*<sp/>sizeof<sp/>(<ref refid="stack_8h_1a178d810735b72dab41331e71af8bfe99" kindref="member">ELEM_TYPE</ref>)<sp/>+<sp/>2<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>int),<sp/>1);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>stk.<ref refid="struct_stack_1abd443924fa635c0a50fadff4da57dfba" kindref="member">stackCanL</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)<sp/>stk.<ref refid="struct_stack_1a94f7a65fb55d15a76270929f5b9c6397" kindref="member">stack</ref>;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>stk.<ref refid="struct_stack_1a94f7a65fb55d15a76270929f5b9c6397" kindref="member">stack</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>(<ref refid="stack_8h_1a178d810735b72dab41331e71af8bfe99" kindref="member">ELEM_TYPE</ref>*)(((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)<sp/>stk.<ref refid="struct_stack_1a94f7a65fb55d15a76270929f5b9c6397" kindref="member">stack</ref>)<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>stk.<ref refid="struct_stack_1a09a1dd7998caf0891ae5889e9b548aea" kindref="member">stackCanR</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)<sp/>(stk.<ref refid="struct_stack_1a94f7a65fb55d15a76270929f5b9c6397" kindref="member">stack</ref><sp/>+<sp/>stk.<ref refid="struct_stack_1afb6d4ad9d2904c20d50102d310c963e0" kindref="member">capacity</ref>);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/>*stk.<ref refid="struct_stack_1abd443924fa635c0a50fadff4da57dfba" kindref="member">stackCanL</ref><sp/>=<sp/><ref refid="stack_8h_1ac5ba2c9a466d94cdd0fe7324a4568dbf" kindref="member">CANL</ref>;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/>*stk.<ref refid="struct_stack_1a09a1dd7998caf0891ae5889e9b548aea" kindref="member">stackCanR</ref><sp/>=<sp/><ref refid="stack_8h_1af4177486d72b0452c84830f8b67464a8" kindref="member">CANR</ref>;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8cpp_1a331eb5bc38763cfe6fead891904aac75" kindref="member">StackCountHash</ref><sp/>(&amp;stk);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//StackDump<sp/>(stk);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stk;</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="stack_8cpp_1a7a748c43563a85e8c5d154997597c4bb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="stack_8cpp_1a7a748c43563a85e8c5d154997597c4bb" kindref="member">StackDtor</ref><sp/>(<ref refid="struct_stack" kindref="compound">Stack</ref>*<sp/>stk)<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stk<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1ab33094546bed65d3ddf7252ec7ee53a0" kindref="member">setPoison</ref><sp/>(<sp/>stk-&gt;<ref refid="struct_stack_1a79193412a2c8b6a35f4ca6c45f0765dc" kindref="member">canL</ref><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1ab33094546bed65d3ddf7252ec7ee53a0" kindref="member">setPoison</ref><sp/>(<sp/>stk-&gt;<ref refid="struct_stack_1ab067c98a0541b1d261f6c44892eb08c5" kindref="member">canR</ref><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1ab33094546bed65d3ddf7252ec7ee53a0" kindref="member">setPoison</ref><sp/>(<sp/>stk-&gt;<ref refid="struct_stack_1a3a469595caaaf49bbce059efabbe07b5" kindref="member">size</ref><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1ab33094546bed65d3ddf7252ec7ee53a0" kindref="member">setPoison</ref><sp/>(*stk-&gt;<ref refid="struct_stack_1abd443924fa635c0a50fadff4da57dfba" kindref="member">stackCanL</ref><sp/>);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1ab33094546bed65d3ddf7252ec7ee53a0" kindref="member">setPoison</ref><sp/>(*stk-&gt;<ref refid="struct_stack_1a09a1dd7998caf0891ae5889e9b548aea" kindref="member">stackCanR</ref><sp/>);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1ab33094546bed65d3ddf7252ec7ee53a0" kindref="member">setPoison</ref><sp/>(<sp/>stk-&gt;<ref refid="struct_stack_1abd443924fa635c0a50fadff4da57dfba" kindref="member">stackCanL</ref><sp/>);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1ab33094546bed65d3ddf7252ec7ee53a0" kindref="member">setPoison</ref><sp/>(<sp/>stk-&gt;<ref refid="struct_stack_1a09a1dd7998caf0891ae5889e9b548aea" kindref="member">stackCanR</ref><sp/>);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1ab33094546bed65d3ddf7252ec7ee53a0" kindref="member">setPoison</ref><sp/>(<sp/>stk-&gt;<ref refid="struct_stack_1aed401c797b1e17541ad03a3fded5187d" kindref="member">errCode</ref><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1ab33094546bed65d3ddf7252ec7ee53a0" kindref="member">setPoison</ref><sp/>(<sp/>stk-&gt;<ref refid="struct_stack_1a65b24b547c77ac4b5e6dbdc0fd6a3283" kindref="member">hash</ref><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>stk-&gt;<ref refid="struct_stack_1afb6d4ad9d2904c20d50102d310c963e0" kindref="member">capacity</ref>;i++)<sp/><ref refid="stack_8h_1ab33094546bed65d3ddf7252ec7ee53a0" kindref="member">setPoison</ref><sp/>(stk-&gt;<ref refid="struct_stack_1a94f7a65fb55d15a76270929f5b9c6397" kindref="member">stack</ref>[i]);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1ab33094546bed65d3ddf7252ec7ee53a0" kindref="member">setPoison</ref><sp/>(<sp/>stk-&gt;<ref refid="struct_stack_1afb6d4ad9d2904c20d50102d310c963e0" kindref="member">capacity</ref><sp/><sp/>);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>free<sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>stk-&gt;<ref refid="struct_stack_1abd443924fa635c0a50fadff4da57dfba" kindref="member">stackCanL</ref><sp/>);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1ab33094546bed65d3ddf7252ec7ee53a0" kindref="member">setPoison</ref><sp/>(<sp/>stk-&gt;<ref refid="struct_stack_1a94f7a65fb55d15a76270929f5b9c6397" kindref="member">stack</ref><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="96"><highlight class="normal">}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98" refid="stack_8cpp_1a6d12097bc4af03b6c58d724a10758a64" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="stack_8cpp_1a6d12097bc4af03b6c58d724a10758a64" kindref="member">StackPush</ref><sp/>(<ref refid="struct_stack" kindref="compound">Stack</ref>*<sp/>stk,<sp/><ref refid="stack_8h_1a178d810735b72dab41331e71af8bfe99" kindref="member">ELEM_TYPE</ref><sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stk<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8cpp_1a81529740cd4cad5153f44e74c5c27e64" kindref="member">StackVerifyHash</ref><sp/>(stk);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8cpp_1a2ec9d6428127070aa546211087cc603b" kindref="member">StackErrCheck</ref><sp/>(stk);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stk-&gt;<ref refid="struct_stack_1aed401c797b1e17541ad03a3fded5187d" kindref="member">errCode</ref><sp/>!=<sp/><ref refid="stack_8h_1abedba404d3287b5f1ba88ede8463da4bad8b76af209cd7ba83b4ebf33ba1637b2" kindref="member">ok</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8cpp_1a331eb5bc38763cfe6fead891904aac75" kindref="member">StackCountHash</ref><sp/>(stk);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stk-&gt;<ref refid="struct_stack_1a3a469595caaaf49bbce059efabbe07b5" kindref="member">size</ref><sp/>==<sp/>stk-&gt;<ref refid="struct_stack_1afb6d4ad9d2904c20d50102d310c963e0" kindref="member">capacity</ref>)<sp/><ref refid="stack_8cpp_1ad48351fcbd6c3d4ce84d470636525430" kindref="member">ReallocStackSizeShift</ref><sp/>(stk,<sp/>1);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>stk-&gt;<ref refid="struct_stack_1a94f7a65fb55d15a76270929f5b9c6397" kindref="member">stack</ref>[stk-&gt;<ref refid="struct_stack_1a3a469595caaaf49bbce059efabbe07b5" kindref="member">size</ref>]<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>stk-&gt;<ref refid="struct_stack_1a3a469595caaaf49bbce059efabbe07b5" kindref="member">size</ref>++;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8cpp_1a2ec9d6428127070aa546211087cc603b" kindref="member">StackErrCheck</ref><sp/>(stk);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8cpp_1a331eb5bc38763cfe6fead891904aac75" kindref="member">StackCountHash</ref><sp/>(stk);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//StackDump<sp/>(*stk);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal">}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122" refid="stack_8cpp_1a0941f0fc6decbec7accf45e25ea30eb5" refkind="member"><highlight class="normal"><ref refid="stack_8h_1a178d810735b72dab41331e71af8bfe99" kindref="member">ELEM_TYPE</ref><sp/><ref refid="stack_8cpp_1a0941f0fc6decbec7accf45e25ea30eb5" kindref="member">StackPop</ref><sp/>(<ref refid="struct_stack" kindref="compound">Stack</ref>*<sp/>stk)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stk<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8cpp_1a81529740cd4cad5153f44e74c5c27e64" kindref="member">StackVerifyHash</ref><sp/>(stk);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8cpp_1a2ec9d6428127070aa546211087cc603b" kindref="member">StackErrCheck</ref><sp/>(stk);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stk-&gt;<ref refid="struct_stack_1aed401c797b1e17541ad03a3fded5187d" kindref="member">errCode</ref><sp/>!=<sp/><ref refid="stack_8h_1abedba404d3287b5f1ba88ede8463da4bad8b76af209cd7ba83b4ebf33ba1637b2" kindref="member">ok</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stk-&gt;<ref refid="struct_stack_1a3a469595caaaf49bbce059efabbe07b5" kindref="member">size</ref><sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/></highlight><highlight class="comment">//проверка<sp/>на<sp/>stk-&gt;size==0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a178d810735b72dab41331e71af8bfe99" kindref="member">ELEM_TYPE</ref><sp/>retVal<sp/>=<sp/>stk-&gt;<ref refid="struct_stack_1a94f7a65fb55d15a76270929f5b9c6397" kindref="member">stack</ref>[stk-&gt;<ref refid="struct_stack_1a3a469595caaaf49bbce059efabbe07b5" kindref="member">size</ref><sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>stk-&gt;<ref refid="struct_stack_1a94f7a65fb55d15a76270929f5b9c6397" kindref="member">stack</ref>[stk-&gt;<ref refid="struct_stack_1a3a469595caaaf49bbce059efabbe07b5" kindref="member">size</ref>-1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>stk-&gt;<ref refid="struct_stack_1a3a469595caaaf49bbce059efabbe07b5" kindref="member">size</ref>--;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8cpp_1a331eb5bc38763cfe6fead891904aac75" kindref="member">StackCountHash</ref><sp/>(stk);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stk-&gt;<ref refid="struct_stack_1afb6d4ad9d2904c20d50102d310c963e0" kindref="member">capacity</ref><sp/>&gt;<sp/>4<sp/>and<sp/>stk-&gt;<ref refid="struct_stack_1a3a469595caaaf49bbce059efabbe07b5" kindref="member">size</ref><sp/>==<sp/>stk-&gt;<ref refid="struct_stack_1afb6d4ad9d2904c20d50102d310c963e0" kindref="member">capacity</ref><sp/>*<sp/>3<sp/>/<sp/>8)<sp/><ref refid="stack_8cpp_1ad48351fcbd6c3d4ce84d470636525430" kindref="member">ReallocStackSizeShift</ref><sp/>(stk,<sp/>-1);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8cpp_1a2ec9d6428127070aa546211087cc603b" kindref="member">StackErrCheck</ref><sp/>(stk);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8cpp_1a331eb5bc38763cfe6fead891904aac75" kindref="member">StackCountHash</ref><sp/>(stk);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//StackDump<sp/>(*stk);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retVal;</highlight></codeline>
<codeline lineno="146"><highlight class="normal">}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148" refid="stack_8cpp_1ad48351fcbd6c3d4ce84d470636525430" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="stack_8cpp_1ad48351fcbd6c3d4ce84d470636525430" kindref="member">ReallocStackSizeShift</ref><sp/>(<ref refid="struct_stack" kindref="compound">Stack</ref>*<sp/>stk,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>delta)<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stk<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8cpp_1a81529740cd4cad5153f44e74c5c27e64" kindref="member">StackVerifyHash</ref><sp/>(stk);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8cpp_1a2ec9d6428127070aa546211087cc603b" kindref="member">StackErrCheck</ref><sp/>(stk);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stk-&gt;<ref refid="struct_stack_1aed401c797b1e17541ad03a3fded5187d" kindref="member">errCode</ref><sp/>!=<sp/><ref refid="stack_8h_1abedba404d3287b5f1ba88ede8463da4bad8b76af209cd7ba83b4ebf33ba1637b2" kindref="member">ok</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/>*((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)<sp/>(stk-&gt;<ref refid="struct_stack_1a94f7a65fb55d15a76270929f5b9c6397" kindref="member">stack</ref><sp/>+<sp/>stk-&gt;<ref refid="struct_stack_1afb6d4ad9d2904c20d50102d310c963e0" kindref="member">capacity</ref>))<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(delta<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stk-&gt;<ref refid="struct_stack_1a94f7a65fb55d15a76270929f5b9c6397" kindref="member">stack</ref><sp/>=<sp/>(<ref refid="stack_8h_1a178d810735b72dab41331e71af8bfe99" kindref="member">ELEM_TYPE</ref>*)<sp/>calloc<sp/>(stk-&gt;<ref refid="struct_stack_1afb6d4ad9d2904c20d50102d310c963e0" kindref="member">capacity</ref><sp/>*<sp/>sizeof<sp/>(<ref refid="stack_8h_1a178d810735b72dab41331e71af8bfe99" kindref="member">ELEM_TYPE</ref>)<sp/>*<sp/>2<sp/>+<sp/>2<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>int),<sp/>1);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy<sp/>(stk-&gt;<ref refid="struct_stack_1a94f7a65fb55d15a76270929f5b9c6397" kindref="member">stack</ref>,<sp/>stk-&gt;<ref refid="struct_stack_1abd443924fa635c0a50fadff4da57dfba" kindref="member">stackCanL</ref>,<sp/>stk-&gt;<ref refid="struct_stack_1afb6d4ad9d2904c20d50102d310c963e0" kindref="member">capacity</ref><sp/>*<sp/>sizeof<sp/>(<ref refid="stack_8h_1a178d810735b72dab41331e71af8bfe99" kindref="member">ELEM_TYPE</ref>)<sp/>+<sp/>2<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));<sp/></highlight><highlight class="comment">//3<sp/>-&gt;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stk-&gt;<ref refid="struct_stack_1afb6d4ad9d2904c20d50102d310c963e0" kindref="member">capacity</ref><sp/>*=<sp/>2;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(delta<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stk-&gt;<ref refid="struct_stack_1a94f7a65fb55d15a76270929f5b9c6397" kindref="member">stack</ref><sp/>=<sp/>(<ref refid="stack_8h_1a178d810735b72dab41331e71af8bfe99" kindref="member">ELEM_TYPE</ref>*)<sp/>calloc<sp/>(stk-&gt;<ref refid="struct_stack_1afb6d4ad9d2904c20d50102d310c963e0" kindref="member">capacity</ref><sp/>*<sp/>sizeof<sp/>(<ref refid="stack_8h_1a178d810735b72dab41331e71af8bfe99" kindref="member">ELEM_TYPE</ref>)<sp/>/<sp/>2<sp/><sp/>+<sp/>2<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>int),<sp/>1);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy<sp/>(stk-&gt;<ref refid="struct_stack_1a94f7a65fb55d15a76270929f5b9c6397" kindref="member">stack</ref>,<sp/>stk-&gt;<ref refid="struct_stack_1abd443924fa635c0a50fadff4da57dfba" kindref="member">stackCanL</ref>,<sp/>stk-&gt;<ref refid="struct_stack_1afb6d4ad9d2904c20d50102d310c963e0" kindref="member">capacity</ref><sp/>*<sp/>sizeof<sp/>(<ref refid="stack_8h_1a178d810735b72dab41331e71af8bfe99" kindref="member">ELEM_TYPE</ref>)<sp/>/<sp/>2<sp/>+<sp/>2<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stk-&gt;<ref refid="struct_stack_1afb6d4ad9d2904c20d50102d310c963e0" kindref="member">capacity</ref><sp/>/=<sp/>2;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>free<sp/>(stk-&gt;<ref refid="struct_stack_1abd443924fa635c0a50fadff4da57dfba" kindref="member">stackCanL</ref>);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>stk-&gt;<ref refid="struct_stack_1abd443924fa635c0a50fadff4da57dfba" kindref="member">stackCanL</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)<sp/>stk-&gt;<ref refid="struct_stack_1a94f7a65fb55d15a76270929f5b9c6397" kindref="member">stack</ref>;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>stk-&gt;<ref refid="struct_stack_1a94f7a65fb55d15a76270929f5b9c6397" kindref="member">stack</ref><sp/>=<sp/>(<ref refid="stack_8h_1a178d810735b72dab41331e71af8bfe99" kindref="member">ELEM_TYPE</ref>*)<sp/>(((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)<sp/>stk-&gt;<ref refid="struct_stack_1a94f7a65fb55d15a76270929f5b9c6397" kindref="member">stack</ref>)<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>stk-&gt;<ref refid="struct_stack_1a09a1dd7998caf0891ae5889e9b548aea" kindref="member">stackCanR</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)<sp/>(stk-&gt;<ref refid="struct_stack_1a94f7a65fb55d15a76270929f5b9c6397" kindref="member">stack</ref><sp/>+<sp/>stk-&gt;<ref refid="struct_stack_1afb6d4ad9d2904c20d50102d310c963e0" kindref="member">capacity</ref>);<sp/></highlight><highlight class="comment">//найдена<sp/>ошибка</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/>*stk-&gt;<ref refid="struct_stack_1a09a1dd7998caf0891ae5889e9b548aea" kindref="member">stackCanR</ref><sp/>=<sp/><ref refid="stack_8h_1af4177486d72b0452c84830f8b67464a8" kindref="member">CANR</ref>;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8cpp_1a2ec9d6428127070aa546211087cc603b" kindref="member">StackErrCheck</ref><sp/>(stk);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8cpp_1a331eb5bc38763cfe6fead891904aac75" kindref="member">StackCountHash</ref><sp/>(stk);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//StackDump<sp/>(*stk);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188" refid="stack_8cpp_1aa57535478796950bea6860e32e15b33c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="stack_8cpp_1aa57535478796950bea6860e32e15b33c" kindref="member">StackDumpInside</ref><sp/>(<ref refid="struct_stack" kindref="compound">Stack</ref>*<sp/>stk,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>StackName,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>fileName,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>funcName,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>line)<sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stk<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="flog_8h_1aeaf684fac254929cc9d2194df499ace7" kindref="member">flogprintf</ref><sp/>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8cpp_1a81529740cd4cad5153f44e74c5c27e64" kindref="member">StackVerifyHash</ref><sp/>(stk);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stk<sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf<sp/>(<ref refid="flog_8cpp_1a0ba15c7ed1438007848e9552341264cf" kindref="member">logOutf</ref>,<sp/></highlight><highlight class="stringliteral">&quot;In<sp/>file<sp/>%s,<sp/>function<sp/>%s,<sp/>line<sp/>%u,<sp/>stack<sp/>named<sp/>%s<sp/>is<sp/>a<sp/>NULL<sp/>ptr<sp/>\n&quot;</highlight><highlight class="normal">,<sp/>fileName,<sp/>funcName,<sp/>line,<sp/>StackName);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf<sp/>(<ref refid="flog_8cpp_1a0ba15c7ed1438007848e9552341264cf" kindref="member">logOutf</ref>,<sp/></highlight><highlight class="stringliteral">&quot;In<sp/>file<sp/>%s,<sp/>function<sp/>%s,<sp/>line<sp/>%u,<sp/>stack<sp/>named<sp/>%s<sp/>was<sp/>dumped<sp/>:<sp/>\n&quot;</highlight><highlight class="normal">,<sp/>fileName,<sp/>funcName,<sp/>line,<sp/>StackName);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf<sp/>(<ref refid="flog_8cpp_1a0ba15c7ed1438007848e9552341264cf" kindref="member">logOutf</ref>,<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Errors<sp/>:<sp/>\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8cpp_1a4fe32a828f1513115f6abf92f8f9a066" kindref="member">StackLogPrintErrors</ref><sp/>(stk);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf<sp/>(<ref refid="flog_8cpp_1a0ba15c7ed1438007848e9552341264cf" kindref="member">logOutf</ref>,<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;hash<sp/>=<sp/>%u<sp/>(&quot;</highlight><highlight class="normal">,<sp/>stk-&gt;<ref refid="struct_stack_1a65b24b547c77ac4b5e6dbdc0fd6a3283" kindref="member">hash</ref>);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>stk-&gt;<ref refid="struct_stack_1a65b24b547c77ac4b5e6dbdc0fd6a3283" kindref="member">hash</ref><sp/><sp/><sp/><sp/><sp/><sp/>==<sp/><ref refid="stack_8h_1a636a49191f541b52557a278556c8640e" kindref="member">POISON4</ref>)<sp/>fprintf<sp/>(<ref refid="flog_8cpp_1a0ba15c7ed1438007848e9552341264cf" kindref="member">logOutf</ref>,<sp/></highlight><highlight class="stringliteral">&quot;POISONED)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf<sp/>(<ref refid="flog_8cpp_1a0ba15c7ed1438007848e9552341264cf" kindref="member">logOutf</ref>,<sp/></highlight><highlight class="stringliteral">&quot;ok)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf<sp/>(<ref refid="flog_8cpp_1a0ba15c7ed1438007848e9552341264cf" kindref="member">logOutf</ref>,<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;canL<sp/>=<sp/>0x%X<sp/>(&quot;</highlight><highlight class="normal">,<sp/>stk-&gt;<ref refid="struct_stack_1a79193412a2c8b6a35f4ca6c45f0765dc" kindref="member">canL</ref>);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>stk-&gt;<ref refid="struct_stack_1a79193412a2c8b6a35f4ca6c45f0765dc" kindref="member">canL</ref><sp/><sp/><sp/><sp/><sp/><sp/>==<sp/><ref refid="stack_8h_1a636a49191f541b52557a278556c8640e" kindref="member">POISON4</ref>)<sp/>fprintf<sp/>(<ref refid="flog_8cpp_1a0ba15c7ed1438007848e9552341264cf" kindref="member">logOutf</ref>,<sp/></highlight><highlight class="stringliteral">&quot;POISONED)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>stk-&gt;<ref refid="struct_stack_1a79193412a2c8b6a35f4ca6c45f0765dc" kindref="member">canL</ref><sp/><sp/><sp/><sp/><sp/><sp/>==<sp/><ref refid="stack_8h_1ac5ba2c9a466d94cdd0fe7324a4568dbf" kindref="member">CANL</ref><sp/><sp/><sp/>)<sp/>fprintf<sp/>(<ref refid="flog_8cpp_1a0ba15c7ed1438007848e9552341264cf" kindref="member">logOutf</ref>,<sp/></highlight><highlight class="stringliteral">&quot;ok)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf<sp/>(<ref refid="flog_8cpp_1a0ba15c7ed1438007848e9552341264cf" kindref="member">logOutf</ref>,<sp/></highlight><highlight class="stringliteral">&quot;NOT_OK)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf<sp/>(<ref refid="flog_8cpp_1a0ba15c7ed1438007848e9552341264cf" kindref="member">logOutf</ref>,<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;canR<sp/>=<sp/>0x%X<sp/>(&quot;</highlight><highlight class="normal">,<sp/>stk-&gt;<ref refid="struct_stack_1ab067c98a0541b1d261f6c44892eb08c5" kindref="member">canR</ref>);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>stk-&gt;<ref refid="struct_stack_1ab067c98a0541b1d261f6c44892eb08c5" kindref="member">canR</ref><sp/><sp/><sp/><sp/><sp/><sp/>==<sp/><ref refid="stack_8h_1a636a49191f541b52557a278556c8640e" kindref="member">POISON4</ref>)<sp/>fprintf<sp/>(<ref refid="flog_8cpp_1a0ba15c7ed1438007848e9552341264cf" kindref="member">logOutf</ref>,<sp/></highlight><highlight class="stringliteral">&quot;POISONED)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>stk-&gt;<ref refid="struct_stack_1ab067c98a0541b1d261f6c44892eb08c5" kindref="member">canR</ref><sp/><sp/><sp/><sp/><sp/><sp/>==<sp/><ref refid="stack_8h_1af4177486d72b0452c84830f8b67464a8" kindref="member">CANR</ref><sp/><sp/><sp/>)<sp/>fprintf<sp/>(<ref refid="flog_8cpp_1a0ba15c7ed1438007848e9552341264cf" kindref="member">logOutf</ref>,<sp/></highlight><highlight class="stringliteral">&quot;ok)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf<sp/>(<ref refid="flog_8cpp_1a0ba15c7ed1438007848e9552341264cf" kindref="member">logOutf</ref>,<sp/></highlight><highlight class="stringliteral">&quot;NOT_OK)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf<sp/>(<ref refid="flog_8cpp_1a0ba15c7ed1438007848e9552341264cf" kindref="member">logOutf</ref>,<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;size<sp/>=<sp/>%u<sp/>(&quot;</highlight><highlight class="normal">,<sp/>stk-&gt;<ref refid="struct_stack_1a3a469595caaaf49bbce059efabbe07b5" kindref="member">size</ref>);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>stk-&gt;<ref refid="struct_stack_1a3a469595caaaf49bbce059efabbe07b5" kindref="member">size</ref><sp/><sp/><sp/><sp/><sp/><sp/>==<sp/><ref refid="stack_8h_1a636a49191f541b52557a278556c8640e" kindref="member">POISON4</ref>)<sp/>fprintf<sp/>(<ref refid="flog_8cpp_1a0ba15c7ed1438007848e9552341264cf" kindref="member">logOutf</ref>,<sp/></highlight><highlight class="stringliteral">&quot;POISONED)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf<sp/>(<ref refid="flog_8cpp_1a0ba15c7ed1438007848e9552341264cf" kindref="member">logOutf</ref>,<sp/></highlight><highlight class="stringliteral">&quot;ok)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf<sp/>(<ref refid="flog_8cpp_1a0ba15c7ed1438007848e9552341264cf" kindref="member">logOutf</ref>,<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;capacity<sp/>=<sp/>%u<sp/>(&quot;</highlight><highlight class="normal">,<sp/>stk-&gt;<ref refid="struct_stack_1afb6d4ad9d2904c20d50102d310c963e0" kindref="member">capacity</ref>);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>stk-&gt;<ref refid="struct_stack_1afb6d4ad9d2904c20d50102d310c963e0" kindref="member">capacity</ref><sp/><sp/>==<sp/><ref refid="stack_8h_1a636a49191f541b52557a278556c8640e" kindref="member">POISON4</ref>)<sp/>fprintf<sp/>(<ref refid="flog_8cpp_1a0ba15c7ed1438007848e9552341264cf" kindref="member">logOutf</ref>,<sp/></highlight><highlight class="stringliteral">&quot;POISONED)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf<sp/>(<ref refid="flog_8cpp_1a0ba15c7ed1438007848e9552341264cf" kindref="member">logOutf</ref>,<sp/></highlight><highlight class="stringliteral">&quot;ok)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf<sp/>(<ref refid="flog_8cpp_1a0ba15c7ed1438007848e9552341264cf" kindref="member">logOutf</ref>,<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;stackCanL<sp/>=<sp/>0x%X<sp/>(&quot;</highlight><highlight class="normal">,<sp/>*stk-&gt;<ref refid="struct_stack_1abd443924fa635c0a50fadff4da57dfba" kindref="member">stackCanL</ref>);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*stk-&gt;<ref refid="struct_stack_1abd443924fa635c0a50fadff4da57dfba" kindref="member">stackCanL</ref><sp/>==<sp/><ref refid="stack_8h_1a636a49191f541b52557a278556c8640e" kindref="member">POISON4</ref>)<sp/>fprintf<sp/>(<ref refid="flog_8cpp_1a0ba15c7ed1438007848e9552341264cf" kindref="member">logOutf</ref>,<sp/></highlight><highlight class="stringliteral">&quot;POISONED)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*stk-&gt;<ref refid="struct_stack_1abd443924fa635c0a50fadff4da57dfba" kindref="member">stackCanL</ref><sp/>==<sp/><ref refid="stack_8h_1ac5ba2c9a466d94cdd0fe7324a4568dbf" kindref="member">CANL</ref><sp/><sp/><sp/>)<sp/>fprintf<sp/>(<ref refid="flog_8cpp_1a0ba15c7ed1438007848e9552341264cf" kindref="member">logOutf</ref>,<sp/></highlight><highlight class="stringliteral">&quot;ok)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf<sp/>(<ref refid="flog_8cpp_1a0ba15c7ed1438007848e9552341264cf" kindref="member">logOutf</ref>,<sp/></highlight><highlight class="stringliteral">&quot;NOT_OK)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf<sp/>(<ref refid="flog_8cpp_1a0ba15c7ed1438007848e9552341264cf" kindref="member">logOutf</ref>,<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;stackCanR<sp/>=<sp/>0x%X<sp/>(&quot;</highlight><highlight class="normal">,<sp/>*stk-&gt;<ref refid="struct_stack_1a09a1dd7998caf0891ae5889e9b548aea" kindref="member">stackCanR</ref>);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*stk-&gt;<ref refid="struct_stack_1a09a1dd7998caf0891ae5889e9b548aea" kindref="member">stackCanR</ref><sp/>==<sp/><ref refid="stack_8h_1a636a49191f541b52557a278556c8640e" kindref="member">POISON4</ref>)<sp/>fprintf<sp/>(<ref refid="flog_8cpp_1a0ba15c7ed1438007848e9552341264cf" kindref="member">logOutf</ref>,<sp/></highlight><highlight class="stringliteral">&quot;POISONED)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*stk-&gt;<ref refid="struct_stack_1a09a1dd7998caf0891ae5889e9b548aea" kindref="member">stackCanR</ref><sp/>==<sp/><ref refid="stack_8h_1af4177486d72b0452c84830f8b67464a8" kindref="member">CANR</ref><sp/><sp/><sp/>)<sp/>fprintf<sp/>(<ref refid="flog_8cpp_1a0ba15c7ed1438007848e9552341264cf" kindref="member">logOutf</ref>,<sp/></highlight><highlight class="stringliteral">&quot;ok)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf<sp/>(<ref refid="flog_8cpp_1a0ba15c7ed1438007848e9552341264cf" kindref="member">logOutf</ref>,<sp/></highlight><highlight class="stringliteral">&quot;NOT_OK)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>stk-&gt;<ref refid="struct_stack_1a94f7a65fb55d15a76270929f5b9c6397" kindref="member">stack</ref><sp/><sp/>==<sp/><ref refid="stack_8h_1a636a49191f541b52557a278556c8640e" kindref="member">POISON4</ref>)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>A;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf<sp/>(<ref refid="flog_8cpp_1a0ba15c7ed1438007848e9552341264cf" kindref="member">logOutf</ref>,<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;%s.stack<sp/>:<sp/>\n&quot;</highlight><highlight class="normal">,<sp/>StackName);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>stk-&gt;<ref refid="struct_stack_1afb6d4ad9d2904c20d50102d310c963e0" kindref="member">capacity</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf<sp/>(<ref refid="flog_8cpp_1a0ba15c7ed1438007848e9552341264cf" kindref="member">logOutf</ref>,<sp/></highlight><highlight class="stringliteral">&quot;\t\t&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;%s.stack[%d]<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/><ref refid="stack_8h_1a11b1f1c8e585446cbd5d9817d1e3ceaa" kindref="member">OUT_FORM</ref><sp/>,<sp/>StackName,<sp/>i,<sp/>stk-&gt;<ref refid="struct_stack_1a94f7a65fb55d15a76270929f5b9c6397" kindref="member">stack</ref>[i]);<sp/><sp/><sp/></highlight><highlight class="comment">//%u<sp/>-&gt;<sp/>Stack<sp/>Elem_t<sp/>Format</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="stack_8h_1a20a09eaf47ec1032181089747b89510d" kindref="member">isPoison</ref><sp/>(stk-&gt;<ref refid="struct_stack_1a94f7a65fb55d15a76270929f5b9c6397" kindref="member">stack</ref>[i]))<sp/>fprintf<sp/>(<ref refid="flog_8cpp_1a0ba15c7ed1438007848e9552341264cf" kindref="member">logOutf</ref>,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>(POISONED)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf<sp/>(<ref refid="flog_8cpp_1a0ba15c7ed1438007848e9552341264cf" kindref="member">logOutf</ref>,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal">A:</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf<sp/>(<ref refid="flog_8cpp_1a0ba15c7ed1438007848e9552341264cf" kindref="member">logOutf</ref>,<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;End<sp/>of<sp/>stack&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;End<sp/>of<sp/>dump<sp/>\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8cpp_1a331eb5bc38763cfe6fead891904aac75" kindref="member">StackCountHash</ref><sp/>(stk);</highlight></codeline>
<codeline lineno="252"><highlight class="normal">}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254" refid="stack_8cpp_1a2ec9d6428127070aa546211087cc603b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="stack_8cpp_1a2ec9d6428127070aa546211087cc603b" kindref="member">StackErrCheck</ref><sp/>(<ref refid="struct_stack" kindref="compound">Stack</ref>*<sp/>stk)<sp/>{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stk<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//checking<sp/>for<sp/>poison</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="stack_8h_1a20a09eaf47ec1032181089747b89510d" kindref="member">isPoison</ref><sp/>(<sp/>stk-&gt;<ref refid="struct_stack_1aed401c797b1e17541ad03a3fded5187d" kindref="member">errCode</ref><sp/><sp/>))<sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stk-&gt;<ref refid="struct_stack_1aed401c797b1e17541ad03a3fded5187d" kindref="member">errCode</ref><sp/>=<sp/><ref refid="stack_8h_1abedba404d3287b5f1ba88ede8463da4ba5065ca273e32d5426390f43601261d6c" kindref="member">POISONED_ERRCOD</ref>;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stk-&gt;<ref refid="struct_stack_1aed401c797b1e17541ad03a3fded5187d" kindref="member">errCode</ref>;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="stack_8h_1a20a09eaf47ec1032181089747b89510d" kindref="member">isPoison</ref><sp/>(<sp/>stk-&gt;<ref refid="struct_stack_1a79193412a2c8b6a35f4ca6c45f0765dc" kindref="member">canL</ref><sp/><sp/><sp/><sp/><sp/>)<sp/>or</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a20a09eaf47ec1032181089747b89510d" kindref="member">isPoison</ref><sp/>(<sp/>stk-&gt;<ref refid="struct_stack_1ab067c98a0541b1d261f6c44892eb08c5" kindref="member">canR</ref><sp/><sp/><sp/><sp/><sp/>)<sp/>or</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a20a09eaf47ec1032181089747b89510d" kindref="member">isPoison</ref><sp/>(<sp/>stk-&gt;<ref refid="struct_stack_1afb6d4ad9d2904c20d50102d310c963e0" kindref="member">capacity</ref><sp/>)<sp/>or</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a20a09eaf47ec1032181089747b89510d" kindref="member">isPoison</ref><sp/>(<sp/>stk-&gt;<ref refid="struct_stack_1a3a469595caaaf49bbce059efabbe07b5" kindref="member">size</ref><sp/><sp/><sp/><sp/><sp/>)<sp/>or</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a20a09eaf47ec1032181089747b89510d" kindref="member">isPoison</ref><sp/>(<sp/>stk-&gt;<ref refid="struct_stack_1a94f7a65fb55d15a76270929f5b9c6397" kindref="member">stack</ref><sp/><sp/><sp/><sp/>)<sp/>or</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a20a09eaf47ec1032181089747b89510d" kindref="member">isPoison</ref><sp/>(<sp/>stk-&gt;<ref refid="struct_stack_1abd443924fa635c0a50fadff4da57dfba" kindref="member">stackCanL</ref>)<sp/>or</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a20a09eaf47ec1032181089747b89510d" kindref="member">isPoison</ref><sp/>(*stk-&gt;<ref refid="struct_stack_1abd443924fa635c0a50fadff4da57dfba" kindref="member">stackCanL</ref>)<sp/>or</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a20a09eaf47ec1032181089747b89510d" kindref="member">isPoison</ref><sp/>(<sp/>stk-&gt;<ref refid="struct_stack_1a09a1dd7998caf0891ae5889e9b548aea" kindref="member">stackCanR</ref>)<sp/>or</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a20a09eaf47ec1032181089747b89510d" kindref="member">isPoison</ref><sp/>(*stk-&gt;<ref refid="struct_stack_1a09a1dd7998caf0891ae5889e9b548aea" kindref="member">stackCanR</ref>)<sp/>or</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a20a09eaf47ec1032181089747b89510d" kindref="member">isPoison</ref><sp/>(<sp/>stk-&gt;<ref refid="struct_stack_1a65b24b547c77ac4b5e6dbdc0fd6a3283" kindref="member">hash</ref><sp/><sp/><sp/><sp/><sp/>)<sp/><sp/><sp/>)<sp/>stk-&gt;<ref refid="struct_stack_1aed401c797b1e17541ad03a3fded5187d" kindref="member">errCode</ref><sp/>|=<sp/><ref refid="stack_8h_1abedba404d3287b5f1ba88ede8463da4bafaeaafb72f3224f4bb55b58b75236287" kindref="member">POISON_ACCESS</ref>;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>stk-&gt;<ref refid="struct_stack_1afb6d4ad9d2904c20d50102d310c963e0" kindref="member">capacity</ref>;i++)<sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="stack_8h_1a20a09eaf47ec1032181089747b89510d" kindref="member">isPoison</ref><sp/>(stk-&gt;<ref refid="struct_stack_1a94f7a65fb55d15a76270929f5b9c6397" kindref="member">stack</ref>[i]))<sp/>{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stk-&gt;<ref refid="struct_stack_1aed401c797b1e17541ad03a3fded5187d" kindref="member">errCode</ref><sp/>|=<sp/><ref refid="stack_8h_1abedba404d3287b5f1ba88ede8463da4bafaeaafb72f3224f4bb55b58b75236287" kindref="member">POISON_ACCESS</ref>;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//endof<sp/>check</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>stk-&gt;<ref refid="struct_stack_1a79193412a2c8b6a35f4ca6c45f0765dc" kindref="member">canL</ref><sp/><sp/><sp/><sp/><sp/><sp/>!=<sp/><ref refid="stack_8h_1ac5ba2c9a466d94cdd0fe7324a4568dbf" kindref="member">CANL</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>stk-&gt;<ref refid="struct_stack_1aed401c797b1e17541ad03a3fded5187d" kindref="member">errCode</ref><sp/>|=<sp/><ref refid="stack_8h_1abedba404d3287b5f1ba88ede8463da4ba4215e890c310c3f5ccd3f11486b2eb78" kindref="member">BAD_CAN_L</ref>;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>stk-&gt;<ref refid="struct_stack_1ab067c98a0541b1d261f6c44892eb08c5" kindref="member">canR</ref><sp/><sp/><sp/><sp/><sp/><sp/>!=<sp/><ref refid="stack_8h_1af4177486d72b0452c84830f8b67464a8" kindref="member">CANR</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>stk-&gt;<ref refid="struct_stack_1aed401c797b1e17541ad03a3fded5187d" kindref="member">errCode</ref><sp/>|=<sp/><ref refid="stack_8h_1abedba404d3287b5f1ba88ede8463da4ba58c89f81506bf0555b66e55bf326c6df" kindref="member">BAD_CAN_R</ref>;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>stk-&gt;<ref refid="struct_stack_1abd443924fa635c0a50fadff4da57dfba" kindref="member">stackCanL</ref><sp/>==<sp/>NULL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>stk-&gt;<ref refid="struct_stack_1aed401c797b1e17541ad03a3fded5187d" kindref="member">errCode</ref><sp/>|=<sp/><ref refid="stack_8h_1abedba404d3287b5f1ba88ede8463da4ba15dfa62adb3f9feb09ae9dc9beb7c117" kindref="member">NULL_STACK_CAN_L_PTR</ref>;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>stk-&gt;<ref refid="struct_stack_1a09a1dd7998caf0891ae5889e9b548aea" kindref="member">stackCanR</ref><sp/>==<sp/>NULL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>stk-&gt;<ref refid="struct_stack_1aed401c797b1e17541ad03a3fded5187d" kindref="member">errCode</ref><sp/>|=<sp/><ref refid="stack_8h_1abedba404d3287b5f1ba88ede8463da4ba907004763cf34ab8b352775f820539c3" kindref="member">NULL_STACK_CAN_R_PTR</ref>;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*stk-&gt;<ref refid="struct_stack_1abd443924fa635c0a50fadff4da57dfba" kindref="member">stackCanL</ref><sp/>!=<sp/><ref refid="stack_8h_1ac5ba2c9a466d94cdd0fe7324a4568dbf" kindref="member">CANL</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>stk-&gt;<ref refid="struct_stack_1aed401c797b1e17541ad03a3fded5187d" kindref="member">errCode</ref><sp/>|=<sp/><ref refid="stack_8h_1abedba404d3287b5f1ba88ede8463da4ba933bc67a98e186610bc08f655de7da44" kindref="member">BAD_STACK_CAN_L</ref>;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*stk-&gt;<ref refid="struct_stack_1a09a1dd7998caf0891ae5889e9b548aea" kindref="member">stackCanR</ref><sp/>!=<sp/><ref refid="stack_8h_1af4177486d72b0452c84830f8b67464a8" kindref="member">CANR</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>stk-&gt;<ref refid="struct_stack_1aed401c797b1e17541ad03a3fded5187d" kindref="member">errCode</ref><sp/>|=<sp/><ref refid="stack_8h_1abedba404d3287b5f1ba88ede8463da4ba74459aaef8d1a41df374ff51fdbf38da" kindref="member">BAD_STACK_CAN_R</ref>;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>stk-&gt;<ref refid="struct_stack_1a94f7a65fb55d15a76270929f5b9c6397" kindref="member">stack</ref><sp/><sp/><sp/><sp/><sp/>==<sp/>NULL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>stk-&gt;<ref refid="struct_stack_1aed401c797b1e17541ad03a3fded5187d" kindref="member">errCode</ref><sp/>|=<sp/><ref refid="stack_8h_1abedba404d3287b5f1ba88ede8463da4ba55bc3e5442f1fb70cc4b4b814b9fcec5" kindref="member">NULL_STACK_PTR</ref>;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>stk-&gt;<ref refid="struct_stack_1a3a469595caaaf49bbce059efabbe07b5" kindref="member">size</ref><sp/><sp/><sp/><sp/><sp/><sp/>&gt;<sp/><sp/>stk-&gt;<ref refid="struct_stack_1afb6d4ad9d2904c20d50102d310c963e0" kindref="member">capacity</ref>)<sp/>stk-&gt;<ref refid="struct_stack_1aed401c797b1e17541ad03a3fded5187d" kindref="member">errCode</ref><sp/>|=<sp/><ref refid="stack_8h_1abedba404d3287b5f1ba88ede8463da4badb8b16b7866a0eee3872f249bc06c5ac" kindref="member">WRONG_SIZE</ref>;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8cpp_1a331eb5bc38763cfe6fead891904aac75" kindref="member">StackCountHash</ref><sp/>(stk);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//StackDump<sp/>(*stk);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stk-&gt;<ref refid="struct_stack_1aed401c797b1e17541ad03a3fded5187d" kindref="member">errCode</ref>;</highlight></codeline>
<codeline lineno="300"><highlight class="normal">}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302" refid="stack_8cpp_1a4fe32a828f1513115f6abf92f8f9a066" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="stack_8cpp_1a4fe32a828f1513115f6abf92f8f9a066" kindref="member">StackLogPrintErrors</ref><sp/>(<ref refid="struct_stack" kindref="compound">Stack</ref>*<sp/>stk)<sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stk<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//StackCountHash<sp/>(stk);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>names<sp/>[11][40]<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stk-&gt;<ref refid="struct_stack_1aed401c797b1e17541ad03a3fded5187d" kindref="member">errCode</ref><sp/>&amp;<sp/><ref refid="stack_8h_1abedba404d3287b5f1ba88ede8463da4bafaeaafb72f3224f4bb55b58b75236287" kindref="member">POISON_ACCESS</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>strcpy<sp/>(names[iter++],<sp/></highlight><highlight class="stringliteral">&quot;\t\t[POISON_ACCESS<sp/><sp/><sp/><sp/><sp/><sp/><sp/>]\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stk-&gt;<ref refid="struct_stack_1aed401c797b1e17541ad03a3fded5187d" kindref="member">errCode</ref><sp/>&amp;<sp/><ref refid="stack_8h_1abedba404d3287b5f1ba88ede8463da4ba4215e890c310c3f5ccd3f11486b2eb78" kindref="member">BAD_CAN_L</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>strcpy<sp/>(names[iter++],<sp/></highlight><highlight class="stringliteral">&quot;\t\t[BAD_CAN_L<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>]\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stk-&gt;<ref refid="struct_stack_1aed401c797b1e17541ad03a3fded5187d" kindref="member">errCode</ref><sp/>&amp;<sp/><ref refid="stack_8h_1abedba404d3287b5f1ba88ede8463da4ba58c89f81506bf0555b66e55bf326c6df" kindref="member">BAD_CAN_R</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>strcpy<sp/>(names[iter++],<sp/></highlight><highlight class="stringliteral">&quot;\t\t[BAD_CAN_R<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>]\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stk-&gt;<ref refid="struct_stack_1aed401c797b1e17541ad03a3fded5187d" kindref="member">errCode</ref><sp/>&amp;<sp/><ref refid="stack_8h_1abedba404d3287b5f1ba88ede8463da4ba933bc67a98e186610bc08f655de7da44" kindref="member">BAD_STACK_CAN_L</ref><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>strcpy<sp/>(names[iter++],<sp/></highlight><highlight class="stringliteral">&quot;\t\t[BAD_STACK_CAN_L<sp/><sp/><sp/><sp/><sp/>]\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stk-&gt;<ref refid="struct_stack_1aed401c797b1e17541ad03a3fded5187d" kindref="member">errCode</ref><sp/>&amp;<sp/><ref refid="stack_8h_1abedba404d3287b5f1ba88ede8463da4ba74459aaef8d1a41df374ff51fdbf38da" kindref="member">BAD_STACK_CAN_R</ref><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>strcpy<sp/>(names[iter++],<sp/></highlight><highlight class="stringliteral">&quot;\t\t[BAD_STACK_CAN_R<sp/><sp/><sp/><sp/><sp/>]\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stk-&gt;<ref refid="struct_stack_1aed401c797b1e17541ad03a3fded5187d" kindref="member">errCode</ref><sp/>&amp;<sp/><ref refid="stack_8h_1abedba404d3287b5f1ba88ede8463da4ba55bc3e5442f1fb70cc4b4b814b9fcec5" kindref="member">NULL_STACK_PTR</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>strcpy<sp/>(names[iter++],<sp/></highlight><highlight class="stringliteral">&quot;\t\t[NULL_STACK_PTR<sp/><sp/><sp/><sp/><sp/><sp/>]\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stk-&gt;<ref refid="struct_stack_1aed401c797b1e17541ad03a3fded5187d" kindref="member">errCode</ref><sp/>&amp;<sp/><ref refid="stack_8h_1abedba404d3287b5f1ba88ede8463da4ba15dfa62adb3f9feb09ae9dc9beb7c117" kindref="member">NULL_STACK_CAN_L_PTR</ref><sp/>)<sp/>strcpy<sp/>(names[iter++],<sp/></highlight><highlight class="stringliteral">&quot;\t\t[NULL_STACK_CAN_L_PTR]\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stk-&gt;<ref refid="struct_stack_1aed401c797b1e17541ad03a3fded5187d" kindref="member">errCode</ref><sp/>&amp;<sp/><ref refid="stack_8h_1abedba404d3287b5f1ba88ede8463da4ba907004763cf34ab8b352775f820539c3" kindref="member">NULL_STACK_CAN_R_PTR</ref><sp/>)<sp/>strcpy<sp/>(names[iter++],<sp/></highlight><highlight class="stringliteral">&quot;\t\t[NULL_STACK_CAN_R_PTR]\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stk-&gt;<ref refid="struct_stack_1aed401c797b1e17541ad03a3fded5187d" kindref="member">errCode</ref><sp/>&amp;<sp/><ref refid="stack_8h_1abedba404d3287b5f1ba88ede8463da4badb8b16b7866a0eee3872f249bc06c5ac" kindref="member">WRONG_SIZE</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>strcpy<sp/>(names[iter++],<sp/></highlight><highlight class="stringliteral">&quot;\t\t[WRONG_SIZE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>]\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stk-&gt;<ref refid="struct_stack_1aed401c797b1e17541ad03a3fded5187d" kindref="member">errCode</ref><sp/>&amp;<sp/><ref refid="stack_8h_1abedba404d3287b5f1ba88ede8463da4ba5065ca273e32d5426390f43601261d6c" kindref="member">POISONED_ERRCOD</ref><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>strcpy<sp/>(names[iter++],<sp/></highlight><highlight class="stringliteral">&quot;\t\t[POISONED_ERRCOD<sp/><sp/><sp/><sp/><sp/>]\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stk-&gt;<ref refid="struct_stack_1aed401c797b1e17541ad03a3fded5187d" kindref="member">errCode</ref><sp/>&amp;<sp/><ref refid="stack_8h_1abedba404d3287b5f1ba88ede8463da4baf82caa47427767f6099c52129b9ce508" kindref="member">WRONG_HASH</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>strcpy<sp/>(names[iter++],<sp/></highlight><highlight class="stringliteral">&quot;\t\t[WRONG_HASH<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>]\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iter<sp/>==<sp/>0)<sp/>fprintf<sp/>(<ref refid="flog_8cpp_1a0ba15c7ed1438007848e9552341264cf" kindref="member">logOutf</ref>,<sp/></highlight><highlight class="stringliteral">&quot;\t\t[ok]\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>iter;<sp/>i++)<sp/>fprintf<sp/>(<ref refid="flog_8cpp_1a0ba15c7ed1438007848e9552341264cf" kindref="member">logOutf</ref>,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>names[i]);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal">}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328" refid="stack_8cpp_1a331eb5bc38763cfe6fead891904aac75" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="stack_8cpp_1a331eb5bc38763cfe6fead891904aac75" kindref="member">StackCountHash</ref><sp/>(<ref refid="struct_stack" kindref="compound">Stack</ref>*<sp/>stk)<sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stk<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>newHash<sp/>=<sp/>0,<sp/>multiplier<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>&amp;stk-&gt;<ref refid="struct_stack_1a79193412a2c8b6a35f4ca6c45f0765dc" kindref="member">canL</ref>;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>int);<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newHash<sp/>+=<sp/>((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>int)<sp/>*ptr++)<sp/>*<sp/>multiplier;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>multiplier<sp/>*=<sp/><ref refid="stack_8h_1ac441f219c1d0f60b3f606e0e6f31abd2" kindref="member">MULT</ref>;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>&amp;stk-&gt;<ref refid="struct_stack_1a3a469595caaaf49bbce059efabbe07b5" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>while<sp/>(ptr<sp/>!=<sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>&amp;stk-&gt;<ref refid="struct_stack_1ab067c98a0541b1d261f6c44892eb08c5" kindref="member">canR</ref>)<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newHash<sp/>+=<sp/>((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>int)<sp/>*ptr++)<sp/>*<sp/>multiplier;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>multiplier<sp/>*=<sp/><ref refid="stack_8h_1ac441f219c1d0f60b3f606e0e6f31abd2" kindref="member">MULT</ref>;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>stk-&gt;<ref refid="struct_stack_1abd443924fa635c0a50fadff4da57dfba" kindref="member">stackCanL</ref>;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(stk-&gt;<ref refid="struct_stack_1abd443924fa635c0a50fadff4da57dfba" kindref="member">stackCanL</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ptr<sp/>!=<sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>stk-&gt;<ref refid="struct_stack_1a09a1dd7998caf0891ae5889e9b548aea" kindref="member">stackCanR</ref>)<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newHash<sp/>+=<sp/>((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>int)<sp/>*ptr++)<sp/>*<sp/>multiplier;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>multiplier<sp/>*=<sp/><ref refid="stack_8h_1ac441f219c1d0f60b3f606e0e6f31abd2" kindref="member">MULT</ref>;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>stk-&gt;<ref refid="struct_stack_1a65b24b547c77ac4b5e6dbdc0fd6a3283" kindref="member">hash</ref><sp/>=<sp/>newHash;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//flog<sp/>(stk-&gt;hash);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal">}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364" refid="stack_8cpp_1a81529740cd4cad5153f44e74c5c27e64" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="stack_8cpp_1a81529740cd4cad5153f44e74c5c27e64" kindref="member">StackVerifyHash</ref><sp/>(<ref refid="struct_stack" kindref="compound">Stack</ref>*<sp/>stk)<sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stk<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>oldHash<sp/>=<sp/>stk-&gt;<ref refid="struct_stack_1a65b24b547c77ac4b5e6dbdc0fd6a3283" kindref="member">hash</ref>;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8cpp_1a331eb5bc38763cfe6fead891904aac75" kindref="member">StackCountHash</ref><sp/>(stk);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stk-&gt;<ref refid="struct_stack_1a65b24b547c77ac4b5e6dbdc0fd6a3283" kindref="member">hash</ref><sp/>!=<sp/>oldHash)<sp/>{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stk-&gt;<ref refid="struct_stack_1aed401c797b1e17541ad03a3fded5187d" kindref="member">errCode</ref><sp/>|=<sp/><ref refid="stack_8h_1abedba404d3287b5f1ba88ede8463da4baf82caa47427767f6099c52129b9ce508" kindref="member">WRONG_HASH</ref>;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//flog<sp/>(stk-&gt;hash);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="lib/stack.cpp"/>
  </compounddef>
</doxygen>
