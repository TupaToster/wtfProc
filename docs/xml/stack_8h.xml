<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="stack_8h" kind="file" language="C++">
    <compoundname>stack.h</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes refid="flog_8h" local="yes">flog.h</includes>
    <includes refid="cmd_8h" local="yes">cmd.h</includes>
    <includedby refid="stack_8cpp" local="yes">lib/stack.cpp</includedby>
    <incdepgraph>
      <node id="1">
        <label>lib/stack.h</label>
        <link refid="stack_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>stdlib.h</label>
      </node>
      <node id="7">
        <label>string.h</label>
      </node>
      <node id="5">
        <label>typeinfo</label>
      </node>
      <node id="8">
        <label>cmd.h</label>
        <link refid="cmd_8h"/>
      </node>
      <node id="6">
        <label>time.h</label>
      </node>
      <node id="4">
        <label>flog.h</label>
        <link refid="flog_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>lib/stack.h</label>
        <link refid="stack_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>lib/stack.cpp</label>
        <link refid="stack_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_stack" prot="public">Stack</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="stack_8h_1a178d810735b72dab41331e71af8bfe99" prot="public" static="no">
        <name>ELEM_TYPE</name>
        <initializer><ref refid="cmd_8h_1a48ca3ff2cfe9aa2266d0fd50b0858a80" kindref="member">elem_t</ref></initializer>
        <briefdescription>
<para>Type of element a stack operates with. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/stack.h" line="10" column="9" bodyfile="lib/stack.h" bodystart="10" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stack_8h_1a11b1f1c8e585446cbd5d9817d1e3ceaa" prot="public" static="no">
        <name>OUT_FORM</name>
        <initializer><ref refid="cmd_8h_1a4700822ad9e0ed0526e8cf27557fdc1f" kindref="member">elem_t_F</ref></initializer>
        <briefdescription>
<para>Output format for printf functions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/stack.h" line="11" column="9" bodyfile="lib/stack.h" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stack_8h_1ac5ba2c9a466d94cdd0fe7324a4568dbf" prot="public" static="no">
        <name>CANL</name>
        <initializer>0xDEADBEEF</initializer>
        <briefdescription>
<para>Left cannary of a structure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/stack.h" line="17" column="9" bodyfile="lib/stack.h" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stack_8h_1af4177486d72b0452c84830f8b67464a8" prot="public" static="no">
        <name>CANR</name>
        <initializer>0xD34DB33F</initializer>
        <briefdescription>
<para>Right cannary of a structure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/stack.h" line="18" column="9" bodyfile="lib/stack.h" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stack_8h_1a44ce32c2c103442949904e92a5803f44" prot="public" static="no">
        <name>POISON1</name>
        <initializer>0xBD</initializer>
        <briefdescription>
<para>1 byte Poison </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/stack.h" line="20" column="9" bodyfile="lib/stack.h" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stack_8h_1a8ee8fd516222866a78ba4a4aae2eb10c" prot="public" static="no">
        <name>POISON2</name>
        <initializer>0xBDCF</initializer>
        <briefdescription>
<para>2 byte Poison </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/stack.h" line="21" column="9" bodyfile="lib/stack.h" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stack_8h_1a636a49191f541b52557a278556c8640e" prot="public" static="no">
        <name>POISON4</name>
        <initializer>0xBADC0FEE</initializer>
        <briefdescription>
<para>4 byte Poison </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/stack.h" line="22" column="9" bodyfile="lib/stack.h" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stack_8h_1a87f9c88b5d9ecba250a24151f4f4f9b9" prot="public" static="no">
        <name>POISON8</name>
        <initializer>0xBADC0FEEF04DED32</initializer>
        <briefdescription>
<para>8 byte Poison </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/stack.h" line="23" column="9" bodyfile="lib/stack.h" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stack_8h_1ac441f219c1d0f60b3f606e0e6f31abd2" prot="public" static="no">
        <name>MULT</name>
        <initializer>37u</initializer>
        <briefdescription>
<para>Multiplier for hash. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/stack.h" line="25" column="9" bodyfile="lib/stack.h" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stack_8h_1ab33094546bed65d3ddf7252ec7ee53a0" prot="public" static="no">
        <name>setPoison</name>
        <param><defname>var</defname></param>
        <initializer><ref refid="stack_8h_1a60bb9a078b9f0f215577719c53003db2" kindref="member">setPoisonInside</ref> (&amp;var, sizeof (var))</initializer>
        <briefdescription>
<para>Macros for auto-poison. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/stack.h" line="27" column="9" bodyfile="lib/stack.h" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stack_8h_1a20a09eaf47ec1032181089747b89510d" prot="public" static="no">
        <name>isPoison</name>
        <param><defname>var</defname></param>
        <initializer><ref refid="stack_8h_1a00d7f278e2c87be49ce52a84f1f925cb" kindref="member">isPoisonInside</ref> (&amp;var, sizeof (var))</initializer>
        <briefdescription>
<para>Macros for checking for poison. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/stack.h" line="29" column="9" bodyfile="lib/stack.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stack_8h_1a69595dc2450bd35617f155ffa5738490" prot="public" static="no">
        <name>StackDump</name>
        <param><defname>stk</defname></param>
        <initializer><ref refid="stack_8h_1aa57535478796950bea6860e32e15b33c" kindref="member">StackDumpInside</ref> (&amp;stk, #stk, __FILE__, __FUNCTION__, __LINE__)</initializer>
        <briefdescription>
<para><ref refid="struct_stack" kindref="compound">Stack</ref> dump macros. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/stack.h" line="32" column="9" bodyfile="lib/stack.h" bodystart="32" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="stack_8h_1abedba404d3287b5f1ba88ede8463da4b" prot="public" static="no" strong="no">
        <type></type>
        <name>StackErrorCodes</name>
        <enumvalue id="stack_8h_1abedba404d3287b5f1ba88ede8463da4bad8b76af209cd7ba83b4ebf33ba1637b2" prot="public">
          <name>ok</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>All ok. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="stack_8h_1abedba404d3287b5f1ba88ede8463da4bafaeaafb72f3224f4bb55b58b75236287" prot="public">
          <name>POISON_ACCESS</name>
          <initializer>= 1&lt;&lt;0</initializer>
          <briefdescription>
<para>One or more struct elements is poison. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="stack_8h_1abedba404d3287b5f1ba88ede8463da4ba4215e890c310c3f5ccd3f11486b2eb78" prot="public">
          <name>BAD_CAN_L</name>
          <initializer>= 1&lt;&lt;1</initializer>
          <briefdescription>
<para>Dead left cannary of structure. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="stack_8h_1abedba404d3287b5f1ba88ede8463da4ba58c89f81506bf0555b66e55bf326c6df" prot="public">
          <name>BAD_CAN_R</name>
          <initializer>= 1&lt;&lt;2</initializer>
          <briefdescription>
<para>Dead right cannary of structure. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="stack_8h_1abedba404d3287b5f1ba88ede8463da4ba933bc67a98e186610bc08f655de7da44" prot="public">
          <name>BAD_STACK_CAN_L</name>
          <initializer>= 1&lt;&lt;3</initializer>
          <briefdescription>
<para>Dead left cannary of stack. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="stack_8h_1abedba404d3287b5f1ba88ede8463da4ba74459aaef8d1a41df374ff51fdbf38da" prot="public">
          <name>BAD_STACK_CAN_R</name>
          <initializer>= 1&lt;&lt;4</initializer>
          <briefdescription>
<para>Dead right cannary of stack. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="stack_8h_1abedba404d3287b5f1ba88ede8463da4ba55bc3e5442f1fb70cc4b4b814b9fcec5" prot="public">
          <name>NULL_STACK_PTR</name>
          <initializer>= 1&lt;&lt;5</initializer>
          <briefdescription>
<para>NULL ptr for stack. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="stack_8h_1abedba404d3287b5f1ba88ede8463da4ba15dfa62adb3f9feb09ae9dc9beb7c117" prot="public">
          <name>NULL_STACK_CAN_L_PTR</name>
          <initializer>= 1&lt;&lt;6</initializer>
          <briefdescription>
<para>NULL ptr for left stack cannary. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="stack_8h_1abedba404d3287b5f1ba88ede8463da4ba907004763cf34ab8b352775f820539c3" prot="public">
          <name>NULL_STACK_CAN_R_PTR</name>
          <initializer>= 1&lt;&lt;7</initializer>
          <briefdescription>
<para>NULL ptr for right stack cannary. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="stack_8h_1abedba404d3287b5f1ba88ede8463da4badb8b16b7866a0eee3872f249bc06c5ac" prot="public">
          <name>WRONG_SIZE</name>
          <initializer>= 1&lt;&lt;8</initializer>
          <briefdescription>
<para>Size is more than capacity. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="stack_8h_1abedba404d3287b5f1ba88ede8463da4ba5065ca273e32d5426390f43601261d6c" prot="public">
          <name>POISONED_ERRCOD</name>
          <initializer>= 1&lt;&lt;9</initializer>
          <briefdescription>
<para>Errcod variable is poisoned; Ususally means that struct has been destructed. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="stack_8h_1abedba404d3287b5f1ba88ede8463da4baf82caa47427767f6099c52129b9ce508" prot="public">
          <name>WRONG_HASH</name>
          <initializer>= 1&lt;&lt;10</initializer>
          <briefdescription>
<para>Hash was changed without any changes from specified function. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Describes errors within stack. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/stack.h" line="39" column="1" bodyfile="lib/stack.h" bodystart="39" bodyend="52"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="stack_8h_1a7f20099985e66f408b861724863a2f1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_stack" kindref="compound">Stack</ref></type>
        <definition>Stack StackCtor</definition>
        <argsstring>()</argsstring>
        <name>StackCtor</name>
        <briefdescription>
<para>Constructor for <ref refid="struct_stack" kindref="compound">Stack</ref>; Sets default capacity to 4. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Fully operable <ref refid="struct_stack" kindref="compound">Stack</ref> struct </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/stack.h" line="70" column="7" bodyfile="lib/stack.cpp" bodystart="50" bodyend="74" declfile="lib/stack.h" declline="70" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="stack_8h_1a7a748c43563a85e8c5d154997597c4bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void StackDtor</definition>
        <argsstring>(Stack *stk)</argsstring>
        <name>StackDtor</name>
        <param>
          <type><ref refid="struct_stack" kindref="compound">Stack</ref> *</type>
          <declname>stk</declname>
        </param>
        <briefdescription>
<para>Destroys a stack var. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stk</parametername>
</parameternamelist>
<parameterdescription>
<para>ptr to a destroyable variable </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/stack.h" line="74" column="6" bodyfile="lib/stack.cpp" bodystart="76" bodyend="96" declfile="lib/stack.h" declline="74" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="stack_8h_1a6d12097bc4af03b6c58d724a10758a64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void StackPush</definition>
        <argsstring>(Stack *stk, ELEM_TYPE val)</argsstring>
        <name>StackPush</name>
        <param>
          <type><ref refid="struct_stack" kindref="compound">Stack</ref> *</type>
          <declname>stk</declname>
        </param>
        <param>
          <type><ref refid="stack_8h_1a178d810735b72dab41331e71af8bfe99" kindref="member">ELEM_TYPE</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Places an element at the end of a stack. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stk</parametername>
</parameternamelist>
<parameterdescription>
<para>ptr to stack struct </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>value of an element to push </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/stack.h" line="79" column="6" bodyfile="lib/stack.cpp" bodystart="98" bodyend="120" declfile="lib/stack.h" declline="79" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="stack_8h_1a0941f0fc6decbec7accf45e25ea30eb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stack_8h_1a178d810735b72dab41331e71af8bfe99" kindref="member">ELEM_TYPE</ref></type>
        <definition>ELEM_TYPE StackPop</definition>
        <argsstring>(Stack *stk)</argsstring>
        <name>StackPop</name>
        <param>
          <type><ref refid="struct_stack" kindref="compound">Stack</ref> *</type>
          <declname>stk</declname>
        </param>
        <briefdescription>
<para>Removes an element from stack and returns its value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stk</parametername>
</parameternamelist>
<parameterdescription>
<para>ptr to stack </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>element that was removed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/stack.h" line="84" column="11" bodyfile="lib/stack.cpp" bodystart="122" bodyend="146" declfile="lib/stack.h" declline="84" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="stack_8h_1ad48351fcbd6c3d4ce84d470636525430" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ReallocStackSizeShift</definition>
        <argsstring>(Stack *stk, int delta)</argsstring>
        <name>ReallocStackSizeShift</name>
        <param>
          <type><ref refid="struct_stack" kindref="compound">Stack</ref> *</type>
          <declname>stk</declname>
        </param>
        <param>
          <type>int</type>
          <declname>delta</declname>
        </param>
        <briefdescription>
<para>Recallocates a whole stak with a size shift. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stk</parametername>
</parameternamelist>
<parameterdescription>
<para>ptr to stack </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delta</parametername>
</parameternamelist>
<parameterdescription>
<para>direction of size shift: &gt;0 - doubles the size, &lt;0 halves the size </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/stack.h" line="89" column="6" bodyfile="lib/stack.cpp" bodystart="148" bodyend="186" declfile="lib/stack.h" declline="89" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="stack_8h_1aa57535478796950bea6860e32e15b33c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void StackDumpInside</definition>
        <argsstring>(Stack *stk, const char *StackName, const char *fileName, const char *funcName, size_t line)</argsstring>
        <name>StackDumpInside</name>
        <param>
          <type><ref refid="struct_stack" kindref="compound">Stack</ref> *</type>
          <declname>stk</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>StackName</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fileName</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>funcName</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Dumps stack to logs_out. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stk</parametername>
</parameternamelist>
<parameterdescription>
<para>ptr to stack </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>StackName</parametername>
</parameternamelist>
<parameterdescription>
<para>name of stack </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fileName</parametername>
</parameternamelist>
<parameterdescription>
<para>name of file function was called at </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>funcName</parametername>
</parameternamelist>
<parameterdescription>
<para>name of func function was called at </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>line function was called at </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/stack.h" line="97" column="6" bodyfile="lib/stack.cpp" bodystart="188" bodyend="252" declfile="lib/stack.h" declline="97" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="stack_8h_1a2ec9d6428127070aa546211087cc603b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long long</type>
        <definition>unsigned long long StackErrCheck</definition>
        <argsstring>(Stack *stk)</argsstring>
        <name>StackErrCheck</name>
        <param>
          <type><ref refid="struct_stack" kindref="compound">Stack</ref> *</type>
          <declname>stk</declname>
        </param>
        <briefdescription>
<para>Prints errors drom a stack variable. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stk</parametername>
</parameternamelist>
<parameterdescription>
<para>ptr to stack </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>error code stk-&gt;errCode </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/stack.h" line="102" column="20" bodyfile="lib/stack.cpp" bodystart="254" bodyend="300" declfile="lib/stack.h" declline="102" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="stack_8h_1a4fe32a828f1513115f6abf92f8f9a066" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void StackLogPrintErrors</definition>
        <argsstring>(Stack *stk)</argsstring>
        <name>StackLogPrintErrors</name>
        <param>
          <type><ref refid="struct_stack" kindref="compound">Stack</ref> *</type>
          <declname>stk</declname>
        </param>
        <briefdescription>
<para>Prints errors for a StackDump func. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stk</parametername>
</parameternamelist>
<parameterdescription>
<para>ptr to stack </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/stack.h" line="106" column="6" bodyfile="lib/stack.cpp" bodystart="302" bodyend="326" declfile="lib/stack.h" declline="106" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="stack_8h_1a331eb5bc38763cfe6fead891904aac75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void StackCountHash</definition>
        <argsstring>(Stack *stk)</argsstring>
        <name>StackCountHash</name>
        <param>
          <type><ref refid="struct_stack" kindref="compound">Stack</ref> *</type>
          <declname>stk</declname>
        </param>
        <briefdescription>
<para>Counts hash for stack. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stk</parametername>
</parameternamelist>
<parameterdescription>
<para>ptr to stack </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/stack.h" line="110" column="6" bodyfile="lib/stack.cpp" bodystart="328" bodyend="362" declfile="lib/stack.h" declline="110" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="stack_8h_1a81529740cd4cad5153f44e74c5c27e64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void StackVerifyHash</definition>
        <argsstring>(Stack *stk)</argsstring>
        <name>StackVerifyHash</name>
        <param>
          <type><ref refid="struct_stack" kindref="compound">Stack</ref> *</type>
          <declname>stk</declname>
        </param>
        <briefdescription>
<para>Verifies hash for stack (tells if it was changed without any <ref refid="struct_stack" kindref="compound">Stack</ref> specified functions) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stk</parametername>
</parameternamelist>
<parameterdescription>
<para>ptr to stack </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/stack.h" line="114" column="6" bodyfile="lib/stack.cpp" bodystart="364" bodyend="377" declfile="lib/stack.h" declline="114" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="stack_8h_1a60bb9a078b9f0f215577719c53003db2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setPoisonInside</definition>
        <argsstring>(void *var, size_t sizeofVar)</argsstring>
        <name>setPoisonInside</name>
        <param>
          <type>void *</type>
          <declname>var</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sizeofVar</declname>
        </param>
        <briefdescription>
<para>Sets var to a poisoned state. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>var</parametername>
</parameternamelist>
<parameterdescription>
<para>ptr to var </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sizeofVar</parametername>
</parameternamelist>
<parameterdescription>
<para>sizeof var </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/stack.h" line="119" column="6" bodyfile="lib/stack.cpp" bodystart="3" bodyend="17" declfile="lib/stack.h" declline="119" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="stack_8h_1a00d7f278e2c87be49ce52a84f1f925cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool isPoisonInside</definition>
        <argsstring>(void *var, size_t sizeofVar)</argsstring>
        <name>isPoisonInside</name>
        <param>
          <type>void *</type>
          <declname>var</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sizeofVar</declname>
        </param>
        <briefdescription>
<para>Checks for a variable to be poisoned. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>var</parametername>
</parameternamelist>
<parameterdescription>
<para>ptr to var </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sizeofVar</parametername>
</parameternamelist>
<parameterdescription>
<para>size of var </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if poisoned, 0 if not </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/stack.h" line="125" column="6" bodyfile="lib/stack.cpp" bodystart="19" bodyend="48" declfile="lib/stack.h" declline="125" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="flog_8h" kindref="compound">flog.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cmd_8h" kindref="compound">cmd.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DEFINE<sp/>NDEBUG<sp/>TO<sp/>DISABLE<sp/>LOGS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//Constants<sp/>to<sp/>specify<sp/>stack<sp/>element<sp/>type<sp/>and<sp/>element<sp/>output<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10" refid="stack_8h_1a178d810735b72dab41331e71af8bfe99" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ELEM_TYPE<sp/>elem_t<sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11" refid="stack_8h_1a11b1f1c8e585446cbd5d9817d1e3ceaa" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>OUT_FORM<sp/>elem_t_F<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//end<sp/>of<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//inside<sp/>defines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17" refid="stack_8h_1ac5ba2c9a466d94cdd0fe7324a4568dbf" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CANL<sp/>0xDEADBEEF<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18" refid="stack_8h_1af4177486d72b0452c84830f8b67464a8" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CANR<sp/>0xD34DB33F<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20" refid="stack_8h_1a44ce32c2c103442949904e92a5803f44" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>POISON1<sp/>0xBD<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="stack_8h_1a8ee8fd516222866a78ba4a4aae2eb10c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>POISON2<sp/>0xBDCF<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22" refid="stack_8h_1a636a49191f541b52557a278556c8640e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>POISON4<sp/>0xBADC0FEE<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="stack_8h_1a87f9c88b5d9ecba250a24151f4f4f9b9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>POISON8<sp/>0xBADC0FEEF04DED32<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="stack_8h_1ac441f219c1d0f60b3f606e0e6f31abd2" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MULT<sp/>37u<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="stack_8h_1ab33094546bed65d3ddf7252ec7ee53a0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>setPoison(var)<sp/>setPoisonInside<sp/>(&amp;var,<sp/>sizeof<sp/>(var))<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29" refid="stack_8h_1a20a09eaf47ec1032181089747b89510d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>isPoison(var)<sp/>isPoisonInside<sp/>(&amp;var,<sp/>sizeof<sp/>(var))<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NDEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32" refid="stack_8h_1a69595dc2450bd35617f155ffa5738490" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>StackDump(stk)<sp/>StackDumpInside<sp/>(&amp;stk,<sp/>#stk,<sp/>__FILE__,<sp/>__FUNCTION__,<sp/>__LINE__)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>StackDump(stk)<sp/>;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//endof<sp/>inside<sp/>defines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="stack_8h_1abedba404d3287b5f1ba88ede8463da4b" refkind="member"><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="stack_8h_1abedba404d3287b5f1ba88ede8463da4b" kindref="member">StackErrorCodes</ref><sp/>{</highlight></codeline>
<codeline lineno="40" refid="stack_8h_1abedba404d3287b5f1ba88ede8463da4bad8b76af209cd7ba83b4ebf33ba1637b2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1abedba404d3287b5f1ba88ede8463da4bad8b76af209cd7ba83b4ebf33ba1637b2" kindref="member">ok</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0,<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="41" refid="stack_8h_1abedba404d3287b5f1ba88ede8463da4bafaeaafb72f3224f4bb55b58b75236287" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1abedba404d3287b5f1ba88ede8463da4bafaeaafb72f3224f4bb55b58b75236287" kindref="member">POISON_ACCESS</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1&lt;&lt;0,<sp/></highlight></codeline>
<codeline lineno="42" refid="stack_8h_1abedba404d3287b5f1ba88ede8463da4ba4215e890c310c3f5ccd3f11486b2eb78" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1abedba404d3287b5f1ba88ede8463da4ba4215e890c310c3f5ccd3f11486b2eb78" kindref="member">BAD_CAN_L</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1&lt;&lt;1,<sp/></highlight></codeline>
<codeline lineno="43" refid="stack_8h_1abedba404d3287b5f1ba88ede8463da4ba58c89f81506bf0555b66e55bf326c6df" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1abedba404d3287b5f1ba88ede8463da4ba58c89f81506bf0555b66e55bf326c6df" kindref="member">BAD_CAN_R</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1&lt;&lt;2,<sp/></highlight></codeline>
<codeline lineno="44" refid="stack_8h_1abedba404d3287b5f1ba88ede8463da4ba933bc67a98e186610bc08f655de7da44" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1abedba404d3287b5f1ba88ede8463da4ba933bc67a98e186610bc08f655de7da44" kindref="member">BAD_STACK_CAN_L</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1&lt;&lt;3,<sp/></highlight></codeline>
<codeline lineno="45" refid="stack_8h_1abedba404d3287b5f1ba88ede8463da4ba74459aaef8d1a41df374ff51fdbf38da" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1abedba404d3287b5f1ba88ede8463da4ba74459aaef8d1a41df374ff51fdbf38da" kindref="member">BAD_STACK_CAN_R</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1&lt;&lt;4,<sp/></highlight></codeline>
<codeline lineno="46" refid="stack_8h_1abedba404d3287b5f1ba88ede8463da4ba55bc3e5442f1fb70cc4b4b814b9fcec5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1abedba404d3287b5f1ba88ede8463da4ba55bc3e5442f1fb70cc4b4b814b9fcec5" kindref="member">NULL_STACK_PTR</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1&lt;&lt;5,<sp/></highlight></codeline>
<codeline lineno="47" refid="stack_8h_1abedba404d3287b5f1ba88ede8463da4ba15dfa62adb3f9feb09ae9dc9beb7c117" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1abedba404d3287b5f1ba88ede8463da4ba15dfa62adb3f9feb09ae9dc9beb7c117" kindref="member">NULL_STACK_CAN_L_PTR</ref><sp/>=<sp/>1&lt;&lt;6,<sp/></highlight></codeline>
<codeline lineno="48" refid="stack_8h_1abedba404d3287b5f1ba88ede8463da4ba907004763cf34ab8b352775f820539c3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1abedba404d3287b5f1ba88ede8463da4ba907004763cf34ab8b352775f820539c3" kindref="member">NULL_STACK_CAN_R_PTR</ref><sp/>=<sp/>1&lt;&lt;7,<sp/></highlight></codeline>
<codeline lineno="49" refid="stack_8h_1abedba404d3287b5f1ba88ede8463da4badb8b16b7866a0eee3872f249bc06c5ac" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1abedba404d3287b5f1ba88ede8463da4badb8b16b7866a0eee3872f249bc06c5ac" kindref="member">WRONG_SIZE</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1&lt;&lt;8,<sp/></highlight></codeline>
<codeline lineno="50" refid="stack_8h_1abedba404d3287b5f1ba88ede8463da4ba5065ca273e32d5426390f43601261d6c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1abedba404d3287b5f1ba88ede8463da4ba5065ca273e32d5426390f43601261d6c" kindref="member">POISONED_ERRCOD</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1&lt;&lt;9,<sp/></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1abedba404d3287b5f1ba88ede8463da4baf82caa47427767f6099c52129b9ce508" kindref="member">WRONG_HASH</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1&lt;&lt;10<sp/></highlight></codeline>
<codeline lineno="52" refid="stack_8h_1abedba404d3287b5f1ba88ede8463da4baf82caa47427767f6099c52129b9ce508" refkind="member"><highlight class="normal">};</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="struct_stack" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_stack" kindref="compound">Stack</ref><sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="struct_stack_1a79193412a2c8b6a35f4ca6c45f0765dc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><ref refid="struct_stack_1a79193412a2c8b6a35f4ca6c45f0765dc" kindref="member">canL</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0xDEADBEEF;<sp/></highlight></codeline>
<codeline lineno="58" refid="struct_stack_1a65b24b547c77ac4b5e6dbdc0fd6a3283" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><ref refid="struct_stack_1a65b24b547c77ac4b5e6dbdc0fd6a3283" kindref="member">hash</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="59" refid="struct_stack_1a3a469595caaaf49bbce059efabbe07b5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_stack_1a3a469595caaaf49bbce059efabbe07b5" kindref="member">size</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="60" refid="struct_stack_1afb6d4ad9d2904c20d50102d310c963e0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_stack_1afb6d4ad9d2904c20d50102d310c963e0" kindref="member">capacity</ref><sp/><sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="61" refid="struct_stack_1aed401c797b1e17541ad03a3fded5187d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_stack_1aed401c797b1e17541ad03a3fded5187d" kindref="member">errCode</ref><sp/><sp/><sp/>=<sp/><ref refid="stack_8h_1abedba404d3287b5f1ba88ede8463da4bad8b76af209cd7ba83b4ebf33ba1637b2" kindref="member">ok</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="62" refid="struct_stack_1a94f7a65fb55d15a76270929f5b9c6397" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a178d810735b72dab41331e71af8bfe99" kindref="member">ELEM_TYPE</ref>*<sp/><sp/><sp/><sp/><ref refid="struct_stack_1a94f7a65fb55d15a76270929f5b9c6397" kindref="member">stack</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>NULL;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="63" refid="struct_stack_1abd443924fa635c0a50fadff4da57dfba" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><ref refid="struct_stack_1abd443924fa635c0a50fadff4da57dfba" kindref="member">stackCanL</ref><sp/>=<sp/>NULL;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="64" refid="struct_stack_1a09a1dd7998caf0891ae5889e9b548aea" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><ref refid="struct_stack_1a09a1dd7998caf0891ae5889e9b548aea" kindref="member">stackCanR</ref><sp/>=<sp/>NULL;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="65" refid="struct_stack_1ab067c98a0541b1d261f6c44892eb08c5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><ref refid="struct_stack_1ab067c98a0541b1d261f6c44892eb08c5" kindref="member">canR</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0xD34DB33F;<sp/></highlight></codeline>
<codeline lineno="66"><highlight class="normal">};</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><ref refid="struct_stack" kindref="compound">Stack</ref><sp/><ref refid="stack_8h_1a7f20099985e66f408b861724863a2f1b" kindref="member">StackCtor</ref><sp/>();</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="stack_8h_1a7a748c43563a85e8c5d154997597c4bb" kindref="member">StackDtor</ref><sp/>(<ref refid="struct_stack" kindref="compound">Stack</ref>*<sp/>stk);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="stack_8h_1a6d12097bc4af03b6c58d724a10758a64" kindref="member">StackPush</ref><sp/>(<ref refid="struct_stack" kindref="compound">Stack</ref>*<sp/>stk,<sp/><ref refid="stack_8h_1a178d810735b72dab41331e71af8bfe99" kindref="member">ELEM_TYPE</ref><sp/>val);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><ref refid="stack_8h_1a178d810735b72dab41331e71af8bfe99" kindref="member">ELEM_TYPE</ref><sp/><ref refid="stack_8h_1a0941f0fc6decbec7accf45e25ea30eb5" kindref="member">StackPop</ref><sp/>(<ref refid="struct_stack" kindref="compound">Stack</ref>*<sp/>stk);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="stack_8h_1ad48351fcbd6c3d4ce84d470636525430" kindref="member">ReallocStackSizeShift</ref><sp/>(<ref refid="struct_stack" kindref="compound">Stack</ref>*<sp/>stk,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>delta);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="stack_8h_1aa57535478796950bea6860e32e15b33c" kindref="member">StackDumpInside</ref><sp/>(<ref refid="struct_stack" kindref="compound">Stack</ref>*<sp/>stk,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>StackName,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>fileName,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>funcName,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>line);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="stack_8h_1a2ec9d6428127070aa546211087cc603b" kindref="member">StackErrCheck</ref><sp/>(<ref refid="struct_stack" kindref="compound">Stack</ref>*<sp/>stk);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="stack_8h_1a4fe32a828f1513115f6abf92f8f9a066" kindref="member">StackLogPrintErrors</ref><sp/>(<ref refid="struct_stack" kindref="compound">Stack</ref>*<sp/>stk);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="stack_8h_1a331eb5bc38763cfe6fead891904aac75" kindref="member">StackCountHash</ref><sp/>(<ref refid="struct_stack" kindref="compound">Stack</ref>*<sp/>stk);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="stack_8h_1a81529740cd4cad5153f44e74c5c27e64" kindref="member">StackVerifyHash</ref><sp/>(<ref refid="struct_stack" kindref="compound">Stack</ref>*<sp/>stk);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="stack_8h_1a60bb9a078b9f0f215577719c53003db2" kindref="member">setPoisonInside</ref><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>var,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizeofVar);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="stack_8h_1a00d7f278e2c87be49ce52a84f1f925cb" kindref="member">isPoisonInside</ref><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>var,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizeofVar);</highlight></codeline>
    </programlisting>
    <location file="lib/stack.h"/>
  </compounddef>
</doxygen>
