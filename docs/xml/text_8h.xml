<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="text_8h" kind="file" language="C++">
    <compoundname>text.h</compoundname>
    <includes local="no">stdlib.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">assert.h</includes>
    <includes local="no">sys\stat.h</includes>
    <includes local="no">ctype.h</includes>
    <includedby refid="text_8cpp" local="yes">lib/text.cpp</includedby>
    <incdepgraph>
      <node id="5">
        <label>assert.h</label>
      </node>
      <node id="2">
        <label>stdlib.h</label>
      </node>
      <node id="6">
        <label>sys\stat.h</label>
      </node>
      <node id="4">
        <label>string.h</label>
      </node>
      <node id="1">
        <label>lib/text.h</label>
        <link refid="text_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>ctype.h</label>
      </node>
      <node id="3">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>lib/text.cpp</label>
        <link refid="text_8cpp"/>
      </node>
      <node id="1">
        <label>lib/text.h</label>
        <link refid="text_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_line" prot="public">Line</innerclass>
    <innerclass refid="struct_text" prot="public">Text</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="text_8h_1a01d03bc0537e22cfc834530fed3c91ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void initText</definition>
        <argsstring>(Text *target)</argsstring>
        <name>initText</name>
        <param>
          <type><ref refid="struct_text" kindref="compound">Text</ref> *</type>
          <declname>target</declname>
        </param>
        <briefdescription>
<para>Initializes a <ref refid="struct_text" kindref="compound">Text</ref> type var. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>Text* to var to init </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/text.h" line="25" column="6" bodyfile="lib/text.cpp" bodystart="28" bodyend="34" declfile="lib/text.h" declline="25" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="text_8h_1a9fa5786f95cf5ba0f1bd59156bc3c817" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void initLine</definition>
        <argsstring>(Line *target)</argsstring>
        <name>initLine</name>
        <param>
          <type><ref refid="struct_line" kindref="compound">Line</ref> *</type>
          <declname>target</declname>
        </param>
        <briefdescription>
<para>Initializes a <ref refid="struct_line" kindref="compound">Line</ref> type var. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>Line* to var to init </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/text.h" line="27" column="6" bodyfile="lib/text.cpp" bodystart="7" bodyend="11" declfile="lib/text.h" declline="27" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="text_8h_1a359525e4562324c43aa6027b94c4e7b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void killText</definition>
        <argsstring>(Text *target)</argsstring>
        <name>killText</name>
        <param>
          <type><ref refid="struct_text" kindref="compound">Text</ref> *</type>
          <declname>target</declname>
        </param>
        <briefdescription>
<para>Deinitializes a <ref refid="struct_text" kindref="compound">Text</ref> type var. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>Text* to var to kill </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/text.h" line="29" column="6" bodyfile="lib/text.cpp" bodystart="40" bodyend="47" declfile="lib/text.h" declline="29" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="text_8h_1ab706abf6034fcdd337b414e23309fa55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void killLine</definition>
        <argsstring>(Line *target)</argsstring>
        <name>killLine</name>
        <param>
          <type><ref refid="struct_line" kindref="compound">Line</ref> *</type>
          <declname>target</declname>
        </param>
        <briefdescription>
<para>Deinitializes a <ref refid="struct_line" kindref="compound">Line</ref> type var. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>Line* to var to kill </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/text.h" line="31" column="6" bodyfile="lib/text.cpp" bodystart="17" bodyend="21" declfile="lib/text.h" declline="31" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="text_8h_1ac87fbefe4ae9195d7ba3a7a38eed3fdb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t get_size</definition>
        <argsstring>(const char *filename)</argsstring>
        <name>get_size</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Returns size of file in chars. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>name of file to measure </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>sizeof file in chars </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/text.h" line="33" column="8" bodyfile="lib/text.cpp" bodystart="68" bodyend="77" declfile="lib/text.h" declline="33" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="text_8h_1a03fe2c13cf51f8df49fbca3ca8d0f0c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void bufferize</definition>
        <argsstring>(const char *filename, Text *writeTo)</argsstring>
        <name>bufferize</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type><ref refid="struct_text" kindref="compound">Text</ref> *</type>
          <declname>writeTo</declname>
        </param>
        <briefdescription>
<para>Buffirezes file. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>name of file to bufferize </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>writeTo</parametername>
</parameternamelist>
<parameterdescription>
<para>ptr to struct <ref refid="struct_text" kindref="compound">Text</ref> to write buffer and buffer length to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/text.h" line="35" column="6" bodyfile="lib/text.cpp" bodystart="82" bodyend="100" declfile="lib/text.h" declline="35" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="text_8h_1a75a739634df7483901b62c501362ec9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_text" kindref="compound">Text</ref></type>
        <definition>Text read_Text</definition>
        <argsstring>(const char *filename)</argsstring>
        <name>read_Text</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Fills <ref refid="struct_text" kindref="compound">Text</ref> type var with input from file. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>name of file to fill from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="struct_text" kindref="compound">Text</ref> struct full of stuff</para>
</simplesect>
Fills <ref refid="struct_text" kindref="compound">Text</ref> struct with: TextString - whole <ref refid="struct_text" kindref="compound">Text</ref> of a file Lines - array of Lines of file of type [begin, end) stringCnt - amount of strings in file TextSize - sizeof <ref refid="struct_text" kindref="compound">Text</ref> (by get_size) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/text.h" line="37" column="6" bodyfile="lib/text.cpp" bodystart="113" bodyend="131" declfile="lib/text.h" declline="37" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="text_8h_1a022686d6bf6508073540e4e10ef05c0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cntLines</definition>
        <argsstring>(Text *writeTo)</argsstring>
        <name>cntLines</name>
        <param>
          <type><ref refid="struct_text" kindref="compound">Text</ref> *</type>
          <declname>writeTo</declname>
          <defname>src</defname>
        </param>
        <briefdescription>
<para>counts amount of Lines in a <ref refid="struct_text" kindref="compound">Text</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>Text* to wite to and read from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/text.h" line="39" column="6" bodyfile="lib/text.cpp" bodystart="51" bodyend="60" declfile="lib/text.h" declline="39" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="text_8h_1a3d222516c821879ff9db7cdd57b8c8ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void separateLines</definition>
        <argsstring>(Text *writeTo)</argsstring>
        <name>separateLines</name>
        <param>
          <type><ref refid="struct_text" kindref="compound">Text</ref> *</type>
          <declname>writeTo</declname>
        </param>
        <briefdescription>
<para>separates Lines in a <ref refid="struct_text" kindref="compound">Text</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>writeTo</parametername>
</parameternamelist>
<parameterdescription>
<para>Text* to write to and read from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/text.h" line="41" column="6" bodyfile="lib/text.cpp" bodystart="135" bodyend="154" declfile="lib/text.h" declline="41" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys\stat.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ctype.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="10" refid="struct_line" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_line" kindref="compound">Line</ref><sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12" refid="struct_line_1a902f78ce569809df653949d04f345fff" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="struct_line_1a902f78ce569809df653949d04f345fff" kindref="member">begin</ref><sp/>=<sp/>NULL;<sp/></highlight></codeline>
<codeline lineno="13" refid="struct_line_1a8159f758b3711682471b64424d4dd5ea" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="struct_line_1a8159f758b3711682471b64424d4dd5ea" kindref="member">end</ref><sp/><sp/><sp/>=<sp/>NULL;<sp/></highlight></codeline>
<codeline lineno="14"><highlight class="normal">};</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="17" refid="struct_text" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_text" kindref="compound">Text</ref><sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19" refid="struct_text_1aaaffb6c0552bbad4ce62f79fdaba570c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="struct_text_1aaaffb6c0552bbad4ce62f79fdaba570c" kindref="member">TextString</ref><sp/>=<sp/>NULL;<sp/></highlight></codeline>
<codeline lineno="20" refid="struct_text_1a3b8d5e4b32683adc042d220c398944a6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="struct_text_1a3b8d5e4b32683adc042d220c398944a6" kindref="member">TextSize</ref><sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="21" refid="struct_text_1a4e39c4552385cc08a0b1b88e5fc069f3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_line" kindref="compound">Line</ref>*<sp/><ref refid="struct_text_1a4e39c4552385cc08a0b1b88e5fc069f3" kindref="member">Lines</ref><sp/>=<sp/>NULL;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="22" refid="struct_text_1ad944f27b0b4d1a6a4b9b5b1338c78a53" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="struct_text_1ad944f27b0b4d1a6a4b9b5b1338c78a53" kindref="member">stringCnt</ref><sp/>=<sp/>0;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="23"><highlight class="normal">};</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="text_8h_1a01d03bc0537e22cfc834530fed3c91ba" kindref="member">initText</ref><sp/>(<ref refid="struct_text" kindref="compound">Text</ref>*<sp/>target);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="text_8h_1a9fa5786f95cf5ba0f1bd59156bc3c817" kindref="member">initLine</ref><sp/>(<ref refid="struct_line" kindref="compound">Line</ref>*<sp/>target);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="text_8h_1a359525e4562324c43aa6027b94c4e7b0" kindref="member">killText</ref><sp/>(<ref refid="struct_text" kindref="compound">Text</ref>*<sp/>target);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="text_8h_1ab706abf6034fcdd337b414e23309fa55" kindref="member">killLine</ref><sp/>(<ref refid="struct_line" kindref="compound">Line</ref>*<sp/>target);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="text_8h_1ac87fbefe4ae9195d7ba3a7a38eed3fdb" kindref="member">get_size</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>filename);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="text_8h_1a03fe2c13cf51f8df49fbca3ca8d0f0c2" kindref="member">bufferize</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>filename,<sp/><ref refid="struct_text" kindref="compound">Text</ref>*<sp/>writeTo);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><ref refid="struct_text" kindref="compound">Text</ref><sp/><ref refid="text_8h_1a75a739634df7483901b62c501362ec9d" kindref="member">read_Text</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>filename);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="text_8h_1a022686d6bf6508073540e4e10ef05c0c" kindref="member">cntLines</ref><sp/>(<ref refid="struct_text" kindref="compound">Text</ref>*<sp/>writeTo);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="text_8h_1a3d222516c821879ff9db7cdd57b8c8ab" kindref="member">separateLines</ref><sp/>(<ref refid="struct_text" kindref="compound">Text</ref>*<sp/>writeTo);</highlight></codeline>
    </programlisting>
    <location file="lib/text.h"/>
  </compounddef>
</doxygen>
